[{"content":"Introduction Some projects are born out of technical necessity, others from curiosity and the desire to experiment.\nBannator.py was created for all these reasons.\nIt was April 2, 2010. I was working as a consultant for a company that was experiencing repeated unauthorized access attempts on its servers: classic SSH password brute force attacks. A quick, simple, and understandable solution was needed. I could have written a couple of lines in Bash and solved the problem in a few minutes… but this was also an opportunity: to turn a technical need into a learning moment.\nThe company’s technical team had shown interest in Python, considering it more “readable” and “user-friendly” compared to Bash scripts and other sysadmin-oriented solutions. So, I decided to create a small script of just 44 lines, commented line by line, so it would not only be a tool but also a practical example of system automation in Python.\nThe result was Bannator.py – named because it’s the terminator of annoying IPs.\nA script that:\nReads the authentication logs (/var/log/auth.log) Identifies IPs with multiple failed login attempts Counts failed attempts Automatically blocks persistent IPs by writing them into /etc/hosts.deny Creates a backup of the block file, so no rules are lost I also created a YouTube video tutorial showing the script in action on a VirtualBox machine running Debian (version 5.0 Lenny). It was a way to combine teaching and real-world practice, demonstrating how a security issue can be solved with a simple “homegrown” but effective approach.\nWhy bring it back today? Today is August 14, 2025. More than 15 years after its first publication, Bannator.py is obviously outdated (…it already was) compared to modern integrated security solutions, but it still remains:\nA perfect example for anyone who wants to learn how to read and write Python scripts A practical exercise in log parsing A small piece of personal history Useful links GitHub Project YouTube Video Tutorial Full Code Original code dated April 2, 2010 Republished on an old website on February 23, 2023 #!/usr/bin/env python # -*- coding: utf-8 -*- # # Autore: Vincenzo Argese @crisiumdevstudio # YouTube: https://www.youtube.com/@crisiumdevstudio \u0026lt;-- Iscriviti e attiva la campanella GRAZIE # # Script: bannator.py # Descrizione: Script Python – bloccare IP da attacchi brute force # Data pubblicazione: 2 Aprile 2010 (Data di oggi 23 feb 2023 ...OMG) # # Web: www.vasystems.it # Articolo: https://www.informaticawebsystems.com/guida-script-python-bloccare-indirizzi-ip-attacchi-brute-force/ # (Ex-Progetto) Progetto Elven.it WebTV: https://www.youtube.com/channel/UCf36btbKZPx8wTvIP6jKPaQ # Importiamo la libreria string per gestire le righe dei file import string # In questa variabile inseriamo il percorso del file di log pathlog = \u0026#39;/var/log/\u0026#39; # Indichiamo in questa variabile il file di log su da verificare filelog = \u0026#39;auth.log\u0026#39; # Specifichiamo il path file hosts.deny pathban = \u0026#39;/etc/\u0026#39; # fileban = \u0026#39;hosts.deny\u0026#39; # Nella variabile target specifichiamo la stringa da utilizzare nella ricerca degli indirizzi IP # che stanno tentando l\u0026#39;accesso nel nostro sistema. Sappiamo che i log sono presenti nel # file /var/log/auth.log e la riga del log con l\u0026#39;accesso fallito e\u0026#39; # Failed password for invalid user admin from 192.168.1.2 port 17727 ssh2 # Quindi prendiamo come riferimento la stringa \u0026#39;Failed password\u0026#39; # target = \u0026#39;Failed password\u0026#39; # Numero di tentativi massimi consentiti da ogni IP per connettersi al server # su cui e\u0026#39; in esecuzione questo script. # BANNA = 3 # Iniziamo a realizzare il codice vero e proprio: # Contiamo il numero di caratteri della stringa contenuta in target, questo numero ci # permettera\u0026#39; di gestire la stringa e identificare in modo assolutamente preciso l\u0026#39;IP da bloccare. # lunghezza = len(target) # Apro il file auth.log in sola lettura (perche\u0026#39; devo semplicemente ricavare l\u0026#39;informazione # sulle connessioni e sugli IP) # f = file(pathlog+filelog, \u0026#39;r\u0026#39;) # Creiamo un dizionario python contenente gli IP bannati. # Il dizionario e\u0026#39; una struttura che ci permette di gestire le informazioni per chiave e valore # nel nostro caso useremo come chiave l\u0026#39;IP e come valore un numero intero che conta le volte # che l\u0026#39;IP non riesce ad eseguire l\u0026#39;accesso. # {key:valore, key2:valore2, …} # es.: {\u0026#39;192.168.1.2\u0026#39;: 2, \u0026#39;172.16.8.10\u0026#39;: 3} # ip_bannati = {} # Leggo la prima riga del file auth.log e copio il contenuto nella variabile i; i = f.readline() # Ciclo il file finche\u0026#39; la variabile i che contiene la riga da esaminare non e\u0026#39; vuota # quindi finche\u0026#39; il file auth.log non e\u0026#39; terminato. # while (i != \u0026#34;\u0026#34;): # Tramite il metodo find di string ottengo la posizione della stringa in cui stato trovato il target # posizione = string.find(i,target) # Se la posizione e\u0026#39; diversa da -1 significa che il targhet e\u0026#39; stato trovato # Quindi la stringa letta contiene \u0026#39;Failed password\u0026#39; ora dobbiamo riuscire a prendere # la parte della stringa che contiene l\u0026#39;IP if posizione != -1: # RICERCA IP # Concentriamoci sulla riga del file auth.log e in particolare alle parole tra cui l\u0026#39;IP # e\u0026#39; compreso: from 192.168.1.2 port # # Prima di identificare l\u0026#39;IP faccio la ricerca della stringa # from per assicurarmi la corretta posizione # inizio = string.find(i,\u0026#34;from\u0026#34;) if inizio != -1 : inizio = inizio + 5 # +5 caratteri di from e spazio # Calcolo la posizione finale tramite la stringa port fine = string.find(i,\u0026#34;port\u0026#34;) # Ottengo la substring con con l\u0026#39;IP da bannare ip = i[inizio:fine-1] # Se l\u0026#39;IP e\u0026#39; gia\u0026#39; presente in ip_bannati if ip in ip_bannati: # Aggiorna semplicemente il suo contatore ip_bannati[ip] = ip_bannati[ip] + 1 else : # Altrimenti inserisci l\u0026#39;IP e imposta il suo contatore a 1 ip_bannati[ip] = 1 # A questo punto abbiamo finito il lavoro su una singola riga quindi procediamo # con la riga successiva del file auth.log e ed esaminiamola nuovamente con il ciclo while i = f.readline() # In questo punto siamo usciti dal while, questo significa che il file auth.log e\u0026#39; terminato # e non abbiamo altre righe da esaminare, quindi possiamo chiudere il file. f.close() # Creo una copia di backup del file hosts.deny perche\u0026#39; ogni volta che lancio lo script # perdo gli IP bloccati precedentemente denyold = file(pathban+fileban, \u0026#39;r\u0026#39;) # Apro hosts.deny in lettura deny = file(\u0026#39;_\u0026#39;+fileban, \u0026#39;w\u0026#39;) # Creo il file _hosts.deny di backup # Leggo tutte le righe di hosts.deny e le copio in _hosts.deny i = denyold.readline() while (i!=\u0026#34;\u0026#34;): deny.write(i) i = denyold.readline() # Ora non resta che verificare quali IP hanno superato il numero # massimo di tentativi consentiti e scriverli nel file _hosts.deny con la regola opportuna. # # Ciclo per verificare tutti gli IP inseriti nel dizionario # for i in ip_bannati : # Se l\u0026#39;IP ha superato il numero massimo di tentativi # if ip_bannati[i] \u0026gt; BANNA : # Scrivi nel file hosts.deny l\u0026#39;IP con la regola ALL = BLOCCA TUTTO # es.: ALL:192.168.1.10 e vai a capo. # deny.write(\u0026#39;ALL:\u0026#39;+ i+\u0026#39;\\n\u0026#39;) # Chiudo i file denyold.close() deny.close() # Copio il contenuto di _hosts.deny nel file /etc/hosts.deny deny = file(pathban+fileban, \u0026#39;w\u0026#39;) denytmp = file(\u0026#39;_\u0026#39;+fileban, \u0026#39;r\u0026#39;) i = denytmp.readline() while (i!=\u0026#34;\u0026#34;): deny.write(i) i = denytmp.readline() denytmp.close() deny.close() # Fine ","permalink":"https://cr1s1um.github.io/en/post/bannator-python-script-blocks-brute-force/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eSome projects are born out of technical necessity, others from curiosity and the desire to experiment.\u003cbr\u003e\n\u003cstrong\u003eBannator.py\u003c/strong\u003e was created for all these reasons.\u003c/p\u003e\n\u003cp\u003eIt was \u003cstrong\u003eApril 2, 2010\u003c/strong\u003e. I was working as a consultant for a company that was experiencing repeated unauthorized access attempts on its servers: classic \u003cstrong\u003eSSH password brute force attacks\u003c/strong\u003e. A quick, simple, and understandable solution was needed. I could have written a couple of lines in \u003cstrong\u003eBash\u003c/strong\u003e and solved the problem in a few minutes… but this was also an opportunity: to turn a technical need into a learning moment.\u003c/p\u003e","title":"/* bannator.py: The 44 line Python Script That Blocks Brute Force Attacks (this script introduces you to programming!) */"},{"content":"Perceptron for Simulating an AND Logic Gate Idea This code was developed as a practical exercise based on a YouTube video by @enkk.\nIn the video, Enkk explains in a simple and intuitive way what a perceptron is, using a practical and easily understandable example. In this post, we implement the perceptron code.\nGitHub link to the implementation Useful Links: Needless to say, following @Enkk is highly recommended if you are interested in studying Large Language Models (LLMs) and AI.\nEnkk’s YouTube Channel Video “how it works: neural networks (pt.1)” Wikipedia - Perceptron The Automatic Gate Analogy The example used in the video is particularly effective: imagine a parking system where a car can enter only if both gates (Gate A and Gate B) are open at the same time\u0026hellip; OBVIOUSLY! ;-)\nLogical Scheme of the Example Perceptron System Logic (Example from @Enkk): Gate A open = signal 1 Gate B open = signal 1 Output 1 = The car may enter Output 0 = The car may not enter Truth Table (AND): Gate A Gate B Result Action 0 (closed) 0 (closed) 0 ❌ Car does not enter 1 (open) 0 (closed) 0 ❌ Car does not enter 0 (closed) 1 (open) 0 ❌ Car does not enter 1 (open) 1 (open) 1 ✅ Car may enter Connection with Digital Logic This analogy perfectly represents the behavior of an AND logic gate, where the output is 1 only when both inputs are 1. In all other cases, the output is 0.\nWhy Use a Perceptron? It’s important to note that implementing a simple AND gate requires only a few lines of code:\nint porta_and(int a, int b) { return a \u0026amp;\u0026amp; b; // Very simple! } \u0026hellip;even simpler:\n#include \u0026lt;stdio.h\u0026gt; int main(void){ int a,b; a=0; // Assign value 1 or 0 b=0; // Assign value 1 or 0 if (a \u0026amp;\u0026amp; b){ printf(\u0026#34;Valore output: 1\\n\u0026#34;); } else{ printf(\u0026#34;Valore output: 0\\n\u0026#34;); } } What is a Perceptron? The perceptron is the simplest and most fundamental form of an artificial neural network. It is a single artificial neuron that makes decisions based on the data it receives as input.\nBasic Structure A perceptron is made up of:\nInputs: The data it receives (in our case, the state of the two gates) Weights: Numbers that determine the importance of each input (VERY IMPORTANT: weights are the parameters of a Large Language Model, i.e., its intelligence) Bias: A threshold value that helps with the final decision Activation Function: Decides whether to “activate” the neuron (output 1) or not (output 0) Output: The final decision (1 or 0) Why is the perceptron the smallest element of a Neural Network? The perceptron is like the “brick” used to build more complex neural networks:\nSimple Neural Network: 1 perceptron or a few perceptrons (nowadays only for didactic purposes) Multilayer Neural Network: Hundreds or thousands of perceptrons connected together Deep Learning: Millions of perceptrons organized into layers Just as you need to understand how a single brick works before building a house, to understand neural networks it’s useful to first master the perceptron.\nWhy is it Important to Understand How It Works? Theoretical Foundation: All advanced concepts (backpropagation, gradient descent, etc.) are derived from perceptron principles. Didactic Simplicity: Simple enough to fully understand, but contains all the key concepts and allows you to build a mental model. Historical Basis: It was the first artificial neuron model. Intuitive Understanding: Once you understand the perceptron, the conceptual leap to more complex networks becomes much more natural. Didactic Value of This Exercise Using a perceptron for this example may seem excessive, but it represents an excellent educational exercise for several reasons:\nSimple Problem: The AND gate is easy to visualize. Verifiable Result: It’s easy to check whether it works (I added printouts in the code step by step). Complete Concepts: Includes all fundamental elements (training, weights, bias, epochs). Conceptual Bridge: Links basic digital logic to advanced machine learning. 1. Understanding the Fundamentals of Neural Networks Weights: How the network assigns importance to inputs Bias: The threshold term that influences the final decision Activation Function: How binary outputs are produced 2. Learning Process Training Epochs: Repeated learning cycles Dataset: Collection of input-output examples for training Weight Updates: How the network “learns” from its mistakes (VERY IMPORTANT) 3. Learning Algorithm Forward Pass: Prediction calculation Error Calculation: Comparing with the expected output Backward Pass: Updating parameters based on error 4. Convergence Concepts How the network reaches an optimal solution Stopping criteria for training Performance evaluation Implementation NOTE: This is version 1 of the implementation. I will probably update the code on GitHub as I come up with new ideas. Always refer to the GitHub project for the latest version.\nGitHub link to the implementation\n/* * PERCEPTRON * (AND Logic Gate Learning) * * Author: Vincenzo Argese * Web: https://cr1s1um.github.io/ * Date: 2025-08-09 * Version: v1.0 * Idea: Youtuber @Enkk video “come funziona: le reti neurali (pt.1)” https://www.youtube.com/watch?v=2UdQQA65jcM * * Description: * This program implements a simple perceptron (single artificial neuron) that learns * to simulate an AND logic gate through supervised learning. * * The perceptron receives two binary inputs (0 or 1) and learns to output: * - 1 only when both inputs are 1 (like an AND gate) * - 0 in all other cases * * Training process: * 1. Initialize weights and bias with small random values * 2. For each training example, calculate prediction * 3. Compare prediction with expected output * 4. If wrong, adjust weights using perceptron learning rule * 5. Repeat until all predictions are correct or max epochs reached * * This demonstrates fundamental neural network concepts: weights, bias, * activation functions, training epochs, and supervised learning. */ #include \u0026lt;stdio.h\u0026gt; #define EPOCHS 100 // Define constant: maximum number of training epochs /* Forward declaration of activation function */ int activation_function(float sum); int main(void) { /* Training Dataset */ int x[4][2]={ // Input matrix: 4 examples with 2 features each {0,0}, // First example: x1=0, x2=0 -\u0026gt; expected output: 0 {1,0}, // Second example: x1=1, x2=0 -\u0026gt; expected output: 0 {0,1}, // Third example: x1=0, x2=1 -\u0026gt; expected output: 0 {1,1} // Fourth example: x1=1, x2=1 -\u0026gt; expected output: 1 }, y[4]={0,0,0,1}; // Expected outputs: represents AND logic function /* Weights and Bias initialization */ float w1 = 0.1, // Weight for first input, initialized to 0.1 w2 = 0.1, // Weight for second input, initialized to 0.1 b = 0.1; // Bias term, initialized to 0.1 // Learning rate parameter float learning_rate = 0.1; // Controls how much weights are adjusted during learning /* Training Phase */ for (int epoch=0; epoch \u0026lt; EPOCHS; epoch++){ // Main training loop: up to 100 epochs int errors = 0; // Counter for errors in current epoch // Process all training examples for(int i=0; i\u0026lt;4; i++){ // Iterate through all 4 examples in dataset // DEBUG - Print current training state printf(\u0026#34;TRAINING EPOCH: %d\\n\u0026#34;, epoch); // Fixed typo: epoch instead of ephoc printf(\u0026#34;Current errors: %d\\n\u0026#34;, errors); // Print current error count printf(\u0026#34;Input X1: %d - X2: %d\\n\u0026#34;, x[i][0], x[i][1]); // Print current inputs printf(\u0026#34;Expected output Y: %d\\n\u0026#34;, y[i]); // Print expected output printf(\u0026#34;w1: %.1f - w2: %.1f - Bias: %.1f\\n\u0026#34;, w1, w2, b); // Print current weights and bias printf(\u0026#34;Learning Rate: %.1f\\n\u0026#34;, learning_rate); // Print learning rate // Forward pass: calculate weighted sum float weighted_sum = (x[i][0]*w1 + x[i][1]*w2) + b; // Linear combination: x1*w1 + x2*w2 + bias int predicted_output = activation_function(weighted_sum); // Apply activation function // DEBUG - Print forward pass results printf(\u0026#34;Weighted sum: %.1f\\n\u0026#34;, weighted_sum); // Print the weighted sum printf(\u0026#34;Predicted output: %d\\n\u0026#34;, predicted_output); // Print network\u0026#39;s prediction // Calculate prediction error int error = y[i] - predicted_output; // Error = expected - predicted // DEBUG - Print error information printf(\u0026#34;Prediction error: %d\\n\u0026#34;, error); // Print the error printf(\u0026#34;---------------------------------------------\\n\u0026#34;); // Separator line // Update weights if there\u0026#39;s an error (perceptron learning rule) if (error != 0){ // Only update if prediction is wrong // Apply perceptron learning rule w1 += learning_rate * error * x[i][0]; // Update w1: w1 = w1 + η * error * x1 w2 += learning_rate * error * x[i][1]; // Update w2: w2 = w2 + η * error * x2 b += learning_rate * error; // Update bias: b = b + η * error errors++; // Increment error counter } } // Check convergence: stop if no errors occurred if(errors == 0){ // Perfect classification achieved printf(\u0026#34;TRAINING COMPLETED - epoch: %d\\n\u0026#34;, epoch); // Print completion message break; // Exit training loop early } } // Print final results printf(\u0026#34;\\n\\n\u0026#34;); // Print empty lines for readability printf(\u0026#34;=== FINAL TRAINED PARAMETERS ===\\n\u0026#34;); // Print results header printf(\u0026#34;Final w1: %.1f - w2: %.1f - Bias: %.1f\\n\u0026#34;, w1, w2, b); // Print final weights and bias // Test the trained perceptron printf(\u0026#34;\\n=== TESTING TRAINED PERCEPTRON ===\\n\u0026#34;); for(int i=0; i\u0026lt;4; i++){ float test_sum = (x[i][0]*w1 + x[i][1]*w2) + b; int test_output = activation_function(test_sum); printf(\u0026#34;Input (%d,%d) -\u0026gt; Output: %d (Expected: %d)\\n\u0026#34;, x[i][0], x[i][1], test_output, y[i]); } return 0; } /* * Activation Function * * Purpose: Converts continuous weighted sum to binary output * Parameter: float sum - the weighted sum from perceptron * Returns: 1 if sum \u0026gt; 0, otherwise returns 0 * * This implements a threshold activation function commonly used in perceptrons */ int activation_function(float sum){ return (sum \u0026gt; 0) ? 1 : 0; // Ternary operator: if sum \u0026gt; 0 return 1, else return 0 } Conclusion An AND gate can be implemented in a much simpler way, but this exercise provides a solid foundation for understanding the fundamental mechanisms behind more complex neural networks. It serves as an ideal bridge between basic digital logic and advanced machine learning concepts.\nEvery element that may seem “excessive” in this context (weights, bias, training epochs) becomes essential when moving on to more complex problems where traditional solutions are no longer sufficient.\n","permalink":"https://cr1s1um.github.io/en/post/perceptron-c-artificial-neuron-first-step/","summary":"\u003ch1 id=\"perceptron-for-simulating-an-and-logic-gate\"\u003ePerceptron for Simulating an AND Logic Gate\u003c/h1\u003e\n\u003ch2 id=\"idea\"\u003eIdea\u003c/h2\u003e\n\u003cp\u003eThis code was developed as a practical exercise based on a YouTube video by \u003cstrong\u003e@enkk\u003c/strong\u003e.\u003cbr\u003e\nIn the video, Enkk explains in a simple and intuitive way what a perceptron is, using a practical and easily understandable example. In this post, we implement the perceptron code.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cr1s1um/OpenCodeLab/blob/main/c/02_perceptron_and.c\"\u003eGitHub link to the implementation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"useful-links\"\u003eUseful Links:\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eNeedless to say, following @Enkk is highly recommended if you are interested in studying Large Language Models (LLMs) and AI.\u003c/strong\u003e\u003c/p\u003e","title":"/* Build Your First Artificial Neuron in C: The Perceptron Made Simple */"},{"content":"Privacy Policy Pursuant to Article 13 of Regulation (EU) 2016/679 (\u0026ldquo;GDPR\u0026rdquo;), we inform you that this website respects and protects the confidentiality of users\u0026rsquo; personal data.\nData Controller Name: Vincenzo Argese Email: vincenzo#dot#argese#at#gmail#dot#com Website: https://cr1s1um.github.io Purpose of Processing, Legal Basis, and Types of Data Processed This site processes the following personal data for the purposes indicated:\nGoogle Analytics Cookies: The site uses Google Analytics (gtag.js) to analyze visits in aggregate form and improve content. Cookies may collect information such as IP address, browser, device, operating system, visited pages. The legal basis is the data subject\u0026rsquo;s consent (Art. 6, par. 1, letter a GDPR). Tracking is enabled only after consent is given via the cookie banner.\nComment Data (Utteranc.es): Article comments are managed via utteranc.es, which requires authentication through GitHub. When commenting, GitHub processes your personal data according to its own Privacy Policy. This site does not directly access such data.\nTechnical Data: such as IP addresses, browser type, operating system, URI/URL, request time, request method, response file size, server status code. These data are processed automatically for site security and technical maintenance purposes.\nData Disclosure Data collected are processed only by individuals authorized by the Data Controller or by any data processors appointed pursuant to Art. 28 of the GDPR. Data relating to Google Analytics may be transferred outside the EU, under the safeguards provided by Google in compliance with the GDPR and EU Court of Justice rulings (e.g., \u0026ldquo;Schrems II\u0026rdquo; ruling).\nData Retention Consent cookies are stored for 31 days. Anonymous statistical data are retained according to Google Analytics settings. Automatically collected technical data are stored only for as long as strictly necessary for their intended purpose. Data Subject Rights Pursuant to Articles 15 and following of the GDPR, you have the right to:\nobtain confirmation of whether or not personal data concerning you exist; access your personal data; request rectification, erasure, or restriction of processing; object to processing; withdraw consent given; lodge a complaint with the Italian Data Protection Authority https://www.garanteprivacy.it/. You can exercise your rights by writing to the Data Controller at the email address provided above.\nCookies and Similar Technologies The site uses a GDPR-compliant cookie consent management system. On first access, a banner is displayed allowing the user to:\naccept all cookies \u0026ndash;\u0026gt; /* Accept all */; deny consent \u0026ndash;\u0026gt; /* Reject */; customize preferences \u0026ndash;\u0026gt; /* Save preferences */; review consent at any time by clicking on the link \u0026ndash;\u0026gt; /* Manage preferences */ in the footer. Updates This Privacy Policy is subject to updates. Users are encouraged to review this page periodically for any changes.\nLast updated: July 29, 2025\n","permalink":"https://cr1s1um.github.io/en/privacy/","summary":"\u003ch2 id=\"privacy-policy\"\u003ePrivacy Policy\u003c/h2\u003e\n\u003cp\u003ePursuant to Article 13 of Regulation (EU) 2016/679 (\u0026ldquo;GDPR\u0026rdquo;), we inform you that this website respects and protects the confidentiality of users\u0026rsquo; personal data.\u003c/p\u003e\n\u003ch3 id=\"data-controller\"\u003eData Controller\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e: Vincenzo Argese\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEmail\u003c/strong\u003e: vincenzo#dot#argese#at#gmail#dot#com\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWebsite\u003c/strong\u003e: \u003ca href=\"https://cr1s1um.github.io\"\u003ehttps://cr1s1um.github.io\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"purpose-of-processing-legal-basis-and-types-of-data-processed\"\u003ePurpose of Processing, Legal Basis, and Types of Data Processed\u003c/h3\u003e\n\u003cp\u003eThis site processes the following personal data for the purposes indicated:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eGoogle Analytics Cookies\u003c/strong\u003e: The site uses Google Analytics (gtag.js) to analyze visits in aggregate form and improve content. Cookies may collect information such as IP address, browser, device, operating system, visited pages. The legal basis is the data subject\u0026rsquo;s consent (Art. 6, par. 1, letter a GDPR). Tracking is enabled only after consent is given via the cookie banner.\u003c/p\u003e","title":"Privacy and cookie policy"},{"content":"In the 1980s and 1990s, many kids like me were introduced to the world of computing thanks to the legendary Commodore 64, the first assembled personal computers, and rudimentary operating systems like DOS and Windows 3.11. I still vividly remember my first Commodore 64, a gift from my parents in 1989. I was just seven years old, in the second grade of my small hometown school, and the wonder I felt when powering up that computer, with its unmistakable blue and cyan screen, was priceless. That little device opened up an entire universe before me, filled with challenges, study, dedication, and gratification.\nBack then, learning to use a computer meant reading manuals, deciphering BASIC instructions, and often banging your head against problems that would seem absurd today. With early personal computers and DOS, it was often necessary to use the Edit editor to modify autoexec.bat and config.sys configuration files—sometimes just to be able to launch a game. I also discovered that within the QBasic environment of MS-DOS, there were two games: Nibbles and Gorillas. Their source code was entirely written in BASIC and freely accessible. This effort made every achievement, even just loading a game from a cassette or a floppy disk, feel like a rewarding victory.\nMovies of that era celebrated computing: think of titles like War Games, Tron, and the legendary The Lawnmower Man. The computer scientist was portrayed as a fascinating and adventurous figure—an “hacker” capable of mastering the most advanced technologies. I felt that same thrill years later, when, while writing my thesis for the final high school exam, I discovered Debian GNU/Linux. At that time, there was no ADSL yet; everything was done with an old 56k analog modem. I remember ordering the Debian Potato CDs from an Italian Linux User Group. It was an exciting experience that deeply shaped my computing journey.\nToday, however, something seems to have been lost along the way. In the United States, the term coding clearly identifies “real programming.” American schools teach programming languages like Python or JavaScript at an early age, truly preparing students for a STEM career. Thanks to this mindset, the most important tech companies in the world were born in the U.S., revolutionary movements like open source emerged, and today the U.S. is pioneering the use of artificial intelligence.\nIn Italy, on the other hand, the concept of coding is often reduced to a simple teaching tool for “computational thinking” through graphical software like Scratch. These tools, in my view, do not simplify the fundamentals of programming—if anything, they complicate them by adding a layer of visual abstraction that can further confuse students.\nAllow me a quip: in Italy we still get scandalized if someone misuses the subjunctive, yet it seems normal—and almost a badge of honor—to say: “Oh well, I don’t understand anything about computers or math,” as if it were absolutely acceptable—or even commendable—not to care about or grasp the basics of scientific subjects.\nItalian-style coding was born with a noble intent: teaching computational thinking. However, it is often treated as something abstract and disconnected from real programming, almost like a philosophical exercise.\nStudying programming with real languages like Python and C, on the other hand, makes the process of breaking down complex problems into smaller, manageable ones completely natural. Learning these languages means applying this methodology in practice.\nPerhaps I was lucky: in middle school, I had a math teacher who was passionate about computers, with whom I often discussed programming in BASIC—both for the Commodore 64 and for PCs. In high school, I had an excellent math teacher who made us apply what we learned directly in the lab, using Turbo Pascal as a teaching language. Today, that same role could be played by Python. And I cannot forget my computer science teacher, who introduced us to C. In our very first lesson—still unforgettable to me—he explained the concept of algorithms with examples such as making coffee or solving the Tower of Hanoi, telling us: “If you can solve something with pen and paper, then you can also program it.” It was when we started writing code that techniques emerged, methods were refined, and we discovered how programming languages naturally trained the mind in what we now call computational thinking.\nOf course, none of us knew we were learning “computational thinking”: we were simply writing code, creating small games and educational programs, and having fun. We went home and kept programming, making games, exercises, and applications—also because our teacher had very high expectations. Naturally, not everyone liked the subject, even though we had chosen the IT track, but I think that’s only natural.\nIt is essential, for those who love computing and want to become programmers, to study the C language: it is a true mental gym, capable of shaping the logical spirit of the computer scientist and confronting them with challenges involving both hardware and software engineering.\nIn a rapidly evolving technological world, especially with the rise of artificial intelligence, knowing at least the basics of programming through an authentic language like Python should be considered essential from a very young age—just like learning grammar or multiplication tables. Adding further complications through visual blocks like those in Scratch often proves useless and can hinder rather than facilitate learning.\nA concrete example illustrates this well: a “for” loop or an “if” statement is much easier to write directly in Python than to construct the same loop with graphical blocks.\nScratch:\nDrag a “repeat” block Select the number of iterations Insert other blocks inside for the action to repeat, e.g., say “Hello!” Python:\nfor i in range(10): print(\u0026#34;Hello!\u0026#34;) It is clear how much more immediate, readable, and rewarding it is to use Python. Moreover, Python is widely used in the real programming world and is one of the main languages in artificial intelligence development. For educational use, it offers a vast array of libraries: for data analysis, text processing, music, mathematics, and not least, PyGame for game development. This allows students to have fun writing code, creating games and applications. Alternatively, one could introduce game engines such as Godot (the most suitable for both educational and professional use), Unity, or Unreal Engine. I am certain that with tools like these, students would be highly engaged. Naturally, this also requires teachers to have different, more technical preparation—but the educational and motivational payoff would more than justify the effort.\nIn conclusion, Italian-style coding based on Scratch risks alienating students from the real world of programming. It is necessary to get students accustomed to complexity, to confront them with difficult problems, to encourage them to commit and make an effort to solve them. Programming is comparable to learning to play a musical instrument like guitar or piano, to studying dance, or to practicing a sport. There are no shortcuts: it requires study and sacrifice. Just as learning to play guitar requires studying theory and practicing until you build calluses on your fingers, in coding and software development, one must actively program to learn how to solve problems and break down big challenges into smaller, manageable ones. We should go back to teaching real computer science, using real, concrete, and powerful languages like Python and C, which can provide students with tangible and rewarding results—just as it was in the 1980s and 1990s.\nI believe unplugged coding is a valuable teaching tool, useful for training computational thinking through interdisciplinary activities that can be applied to both STEM and humanities subjects. Coding can be applied to studying music, by coloring notes and keys to help students become familiar with instruments; in dance, for memorizing sequences of steps and positions; in sports, mathematics, and even in studying languages and the humanities.\nHowever, coding—and especially unplugged coding—remains an effective tool only in early childhood and the first years of primary school, when students have not yet acquired basic reading and writing skills. From that point onward, just as in learning a musical instrument or dance, it becomes the time for sacrifice: it is necessary to abandon artificially simplified tools, get your hands dirty, and start writing real code. To do it gradually, understanding constructs, taking them apart, examining them, and writing code. Only in this way, I am convinced, can extraordinary results be achieved, both in terms of learning and personal satisfaction. And this is how we can raise a new generation of people who will not simply be technology users, but true masters of it.\n","permalink":"https://cr1s1um.github.io/en/post/coding-italy-scratch-vs-real-programming/","summary":"\u003cp\u003eIn the 1980s and 1990s, many kids like me were introduced to the world of computing thanks to the legendary Commodore 64, the first assembled personal computers, and rudimentary operating systems like DOS and Windows 3.11. I still vividly remember my first Commodore 64, a gift from my parents in 1989. I was just seven years old, in the second grade of my small hometown school, and the wonder I felt when powering up that computer, with its unmistakable blue and cyan screen, was priceless. That little device opened up an entire universe before me, filled with challenges, study, dedication, and gratification.\u003c/p\u003e","title":"/* Coding in Italy: Why Scratch Isn’t Enough (and What Students Really Need) */"},{"content":"\nMy .vimrc Dear developers, IT professionals, and system administrators worldwide, this is my final version of the .vimrc file, and I want to share it with everyone.\nGitHub Page Published: 2025-03-04 Ah\u0026hellip; I have disabled the ALE and Copilot plugins at startup. They are very convenient, but I find them quite intrusive, so I enable them only when needed or necessary.\nYou can enable them manually with the following commands (I prefer enable them when needed):\n:ALEEnable | ALEDisable :Copilot enable | disable Introduction I have worked on this file for many years, in a rather disorganized and experimental way. I started using Debian in the winter of 1999, and since then, I have experimented with many editors for both fun and work. For a long time, I used Emacs, but for the past 24 years, I have exclusively used ViM. I barely remember the Emacs commands now, although I have promised myself to revisit it someday – old friends should not be abandoned.\nMy goal was to have a fast and versatile editor, suitable for both software development and configuration file editing on Linux and Unix systems. I wanted a visually appealing workspace, with features such as autocomplete and auto-correction, along with all the modern conveniences like integration with Large Language Models for automated comment generation.\nAfter testing numerous plugins and configurations, I finally arrived at a .vimrc version that fully satisfies me. I chose the One Dark theme for its clarity, but I also installed a nostalgic theme that transforms ViM into a version inspired by the old QBasic – a tribute to the 90s, although less comfortable for everyday use.\nThe goal of this configuration is to have a powerful and customizable editor capable of meeting the needs of:\nDevelopers: with support for C, C++, Python, HTML, CSS, and JavaScript. System Administrators: for quick and comfortable editing of configuration files on Linux and macOS systems. Github and Copilot: I revised this configuration to overcome some issues with YouCompleteMe on Debian 12 stable and to make it even more complete and versatile.\nNote: A future TODO is to integrate OmniSharp and plugins for Unity3D, but for game development, I have fully embraced Godot and prefer to use its environment for GDscript.\nInstallation Guide - Unix/Linux - Debian GNU/Linux ;-) This guide explains how to set up Vim-Plug and install plugins using a custom .vimrc file.\nInstall Vim-Plug Download the plug.vim file to the appropriate directory:\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Set Up .vimrc Download your vimrc vimrc file and move it to your home directory as .vimrc:\nmv vimrc ~/.vimrc Install Plugins Open ViM and run the following command:\n:PlugInstall Alternatively, install the plugins directly from the command line:\nvim -c \u0026#39;PlugInstall\u0026#39; TODO Integrate OmniSharp for Unity3D support. Add specific configurations to enhance the Godot experience. License This project is licensed under the MIT License. Anyone is free to improve this configuration and, if they wish, credit me as the original author.\nHow to Contribute Feel free to clone this repository, experiment, and propose changes:\nFork the project. Create a branch for your modifications. Submit a pull request with a clear description of the improvements. Thank you for reading this guide! I hope it proves helpful and inspires you to customize your own ViM editor.\n","permalink":"https://cr1s1um.github.io/en/post/ultimate-vim-vimrc-configuration/","summary":"\u003cp\u003e\u003cimg alt=\"ViM Logo\" loading=\"lazy\" src=\"https://www.vasystems.it/img/vimlogo.svg.webp\"\u003e\u003c/p\u003e\n\u003ch1 id=\"my-vimrc\"\u003eMy .vimrc\u003c/h1\u003e\n\u003cp\u003eDear developers, IT professionals, and system administrators worldwide, this is my final version of the \u003ccode\u003e.vimrc\u003c/code\u003e file, and I want to share it with everyone.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cr1s1um/vimrc\"\u003eGitHub Page\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePublished: 2025-03-04\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAh\u0026hellip; I have disabled the ALE and Copilot plugins at startup. They are very convenient, but I find them quite intrusive, so I enable them only when needed or necessary.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eYou can enable them manually with the following commands (I prefer enable them when needed):\u003c/p\u003e","title":"/* The Ultimate ViM Configuration (.vimrc) Every Developer Should Try */"},{"content":"Hi and wellcome! I’m Vincenzo Argese, and my passion for computers and programming began back in 1989, when my parents gave me a Commodore 64. With that little machine and its BASIC programming manual, I wrote my very first lines of code.\nIn 2011, I started my own IT consulting business, focusing on cybersecurity and software development.\nSince 2012, I have specialized in Digital Forensics and Incident Response (DFIR) and serve as a Technical Consultant (CTU) for the Judiciary in criminal justice cases.\nThe operating system I love and use the most is Debian GNU/Linux. Since 1999/2000,over 25 years now, it has been the foundation of all my activities: daily work, personal projects, software development, game development, system administration, and digital forensics.\nMy favorite programming languages are C and Python. In my free time, I enjoy developing video games with Godot Engine (GDScript) and Unreal Engine (C++). My philosophy is to write code that is clean, functional, and secure: no unnecessary complexity, just efficiency and elegance.\nSince 2019, I have been collaborating with Microtech srl, a company specializing in IT consulting for the education sector. I provide cybersecurity training for teachers and administrative staff in schools, and I also work on web development projects.\nThis website is my personal space, where I share the things I love: projects, experiments, and ideas.\nHere you’ll find blog and technical articles on:\n💻 Software development and CyberSecurity 🐧 Debian GNU/Linux 🔐 Insights on Digital Forensics (DFIR) 🎮 Game Development projects . . . Welcome to my digital world!\nMy curriculum vitae Curriculum Vitae - IT\nContacts Twitter/X Github LinkedIn Whi Crisium? The name \u0026ldquo;Crisium\u0026rdquo; (or \u0026ldquo;cr1s1um\u0026rdquo;) comes from a character I used to play in an old text-based role-playing game from the \u0026rsquo;80s/\u0026rsquo;90s, accessed via telnet (MUD - Tempora Sanguinis): a blood-sucking vampire anti-paladin in a dark and fascinating fantasy world.\n","permalink":"https://cr1s1um.github.io/en/about-me/","summary":"\u003ch1 id=\"hi-and-wellcome\"\u003eHi and wellcome!\u003c/h1\u003e\n\u003cp\u003eI’m \u003cstrong\u003eVincenzo Argese\u003c/strong\u003e, and my passion for computers and programming began back in \u003cstrong\u003e1989\u003c/strong\u003e, when my parents gave me a \u003cstrong\u003eCommodore 64\u003c/strong\u003e. With that little machine and its \u003cstrong\u003eBASIC programming manual\u003c/strong\u003e, I wrote my very first lines of code.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003e2011\u003c/strong\u003e, I started my own \u003cstrong\u003eIT consulting business\u003c/strong\u003e, focusing on \u003cstrong\u003ecybersecurity\u003c/strong\u003e and \u003cstrong\u003esoftware development\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eSince \u003cstrong\u003e2012\u003c/strong\u003e, I have specialized in \u003cstrong\u003eDigital Forensics\u003c/strong\u003e and \u003cstrong\u003eIncident Response\u003c/strong\u003e (\u003cstrong\u003eDFIR\u003c/strong\u003e) and serve as a \u003cstrong\u003eTechnical Consultant (CTU)\u003c/strong\u003e for the Judiciary in criminal justice cases.\u003c/p\u003e","title":"/* About me */"},{"content":"#include \u0026lt;stdio.h\u0026gt; int main(){ printf(\u0026#34;Hello world\\n\u0026#34;); return 0; } The first code of every good programmer begins with a simple: \u0026ldquo;Hello, world!\u0026rdquo;\nIn this blog, I want to share my experience and projects on topics that have always fascinated me: Debian GNU/Linux, software development, game development, digital forensics, and cyber security.\nWelcome to this technical and creative journey!\n","permalink":"https://cr1s1um.github.io/en/post/hello-world-c-first-program/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first code of every good programmer begins with a simple: \u0026ldquo;Hello, world!\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eIn this blog, I want to share my experience and projects on topics that have always fascinated me: Debian GNU/Linux, software development, game development, digital forensics, and cyber security.\u003c/p\u003e\n\u003cp\u003eWelcome to this technical and creative journey!\u003c/p\u003e","title":"/* Hello World in C: Why Every Programmer Starts Here */"}]