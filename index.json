[{"content":"Informativa sulla Privacy Ai sensi dell’articolo 13 del Regolamento (UE) 2016/679 (\u0026ldquo;GDPR\u0026rdquo;), ti informiamo che il presente sito web rispetta e tutela la riservatezza dei dati personali degli utenti.\nTitolare del trattamento Nome: Vincenzo Argese Email: vincenzo#dot#argese#at#gmail#dot#com Sito: https://cr1s1um.github.io Finalità del trattamento, base giuridica e tipologia dei dati trattati Il sito tratta i seguenti dati personali per le finalità indicate:\nCookie di Google Analytics: Il sito utilizza Google Analytics (gtag.js) per analizzare in forma aggregata le visite al sito e migliorare i contenuti. I cookie possono raccogliere informazioni come l\u0026rsquo;indirizzo IP, browser, dispositivo, sistema operativo, pagine visitate. La base giuridica è il consenso dell’interessato (art. 6, par. 1, lett. a GDPR). Il tracciamento è attivo solo previo consenso tramite banner cookie.\nDati per i commenti (Utteranc.es): I commenti agli articoli sono gestiti tramite il servizio utteranc.es, che richiede l’autenticazione tramite GitHub. Quando commenti, GitHub tratta i tuoi dati personali secondo le proprie Privacy Policy. Il sito non accede direttamente a tali dati.\nDati tecnici: come indirizzi IP, tipo di browser, sistema operativo, URI/URL, orario della richiesta, metodo di richiesta, dimensione del file di risposta, codice di stato del server. Questi dati vengono trattati automaticamente a fini di sicurezza e manutenzione tecnica del sito.\nComunicazione dei dati I dati raccolti sono trattati esclusivamente da soggetti autorizzati dal Titolare o da eventuali responsabili del trattamento nominati ai sensi dell’art. 28 del GDPR. I dati relativi a Google Analytics possono essere trasferiti verso paesi extra-UE, secondo le garanzie previste da Google in conformità al GDPR e alle decisioni della Corte di Giustizia UE (es. sentenza \u0026ldquo;Schrems II\u0026rdquo;).\nTempi di conservazione I cookie di consenso vengono conservati per 31 giorni. I dati statistici anonimi vengono conservati secondo le impostazioni di Google Analytics. I dati tecnici raccolti automaticamente vengono conservati per il tempo strettamente necessario alla finalità per cui sono stati raccolti. Diritti dell’interessato Ai sensi degli articoli 15 e seguenti del GDPR, hai diritto di:\nottenere conferma dell’esistenza o meno di dati personali che ti riguardano; accedere ai tuoi dati personali; chiedere la rettifica, cancellazione o limitazione del trattamento; opporti al trattamento; revocare il consenso prestato; proporre reclamo al Garante per la protezione dei dati personali https://www.garanteprivacy.it/. Puoi esercitare i tuoi diritti scrivendo al Titolare del Trattamento all’indirizzo email fornito sopra.\nCookie e tecnologie simili Il sito utilizza un sistema di gestione del consenso ai cookie conforme al GDPR. Al primo accesso, viene mostrato un banner che consente all’utente di:\naccettare tutti i cookie \u0026ndash;\u0026gt; /* Accetta tutto */; negare il consensoi \u0026ndash;\u0026gt; /* Rifiuta */; personalizzare le preferenze \u0026ndash;\u0026gt; /* Salva le preferenze */; rivedere il consenso in qualsiasi momento cliccando sul link \u0026ndash;\u0026gt; /* Gestisci le preferenze */ nel footer. Aggiornamenti La presente informativa è soggetta ad aggiornamenti. Gli utenti sono invitati a consultare periodicamente questa pagina per eventuali modifiche.\nUltimo aggiornamento: 29 luglio 2025\n","permalink":"https://cr1s1um.github.io/privacy/","summary":"\u003ch2 id=\"informativa-sulla-privacy\"\u003eInformativa sulla Privacy\u003c/h2\u003e\n\u003cp\u003eAi sensi dell’articolo 13 del Regolamento (UE) 2016/679 (\u0026ldquo;GDPR\u0026rdquo;), ti informiamo che il presente sito web rispetta e tutela la riservatezza dei dati personali degli utenti.\u003c/p\u003e\n\u003ch3 id=\"titolare-del-trattamento\"\u003eTitolare del trattamento\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNome\u003c/strong\u003e: Vincenzo Argese\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEmail\u003c/strong\u003e: vincenzo#dot#argese#at#gmail#dot#com\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSito\u003c/strong\u003e: \u003ca href=\"https://cr1s1um.github.io\"\u003ehttps://cr1s1um.github.io\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"finalità-del-trattamento-base-giuridica-e-tipologia-dei-dati-trattati\"\u003eFinalità del trattamento, base giuridica e tipologia dei dati trattati\u003c/h3\u003e\n\u003cp\u003eIl sito tratta i seguenti dati personali per le finalità indicate:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCookie di Google Analytics\u003c/strong\u003e: Il sito utilizza Google Analytics (gtag.js) per analizzare in forma aggregata le visite al sito e migliorare i contenuti. I cookie possono raccogliere informazioni come l\u0026rsquo;indirizzo IP, browser, dispositivo, sistema operativo, pagine visitate. La base giuridica è il consenso dell’interessato (art. 6, par. 1, lett. a GDPR). Il tracciamento è attivo solo previo consenso tramite banner cookie.\u003c/p\u003e","title":"Privacy Policy, Cookie Policy"},{"content":"Negli anni \u0026lsquo;80 e \u0026lsquo;90, molti ragazzi come me si avvicinavano al mondo dell\u0026rsquo;informatica grazie al mitico Commodore 64, ai primi personal computer assemblati e ai rudimentali sistemi operativi come DOS e Windows 3.11. Ricordo ancora con emozione il mio primo Commodore 64, regalatomi dai miei genitori nel 1989. Avevo appena sette anni, frequentavo la seconda elementare del mio piccolo paese, e la meraviglia provata nell\u0026rsquo;accendere quel computer, con la sua inconfondibile schermata blu e celeste, era impagabile. Quel piccolo dispositivo apriva davanti a me un intero universo fatto di sfide, studio, impegno e gratificazione.\nAll\u0026rsquo;epoca, imparare a usare un computer significava leggere manuali, decifrare istruzioni in linguaggio BASIC e spesso sbattere la testa contro problemi che oggi sembrerebbero assurdi. Con i primi personal computer e il sistema operativo DOS, spesso era necessario utilizzare l\u0026rsquo;editor Edit per modificare i file di configurazione autoexec.bat e config.sys, anche solo per riuscire ad avviare un gioco. Scoprii anche che, all\u0026rsquo;interno dell\u0026rsquo;ambiente QBasic del MS-DOS, erano presenti due giochi: Nibbles e Gorillas, i cui sorgenti erano interamente scritti in BASIC e liberamente consultabili. Proprio questo sforzo rendeva ogni risultato, persino l\u0026rsquo;avvio di un gioco da cassetta o da floppy disk, una conquista gratificante.\nI film di quel periodo celebravano l\u0026rsquo;informatica: basti ricordare titoli come \u0026ldquo;War Games\u0026rdquo;, \u0026ldquo;Tron\u0026rdquo; e il mitico \u0026ldquo;Tagliaerbe\u0026rdquo;. L\u0026rsquo;informatico era una figura affascinante e avventurosa, un hacker capace di dominare le tecnologie più avanzate. Questa bellissima emozione l\u0026rsquo;ho riprovata anni dopo, quando, durante la scrittura della tesina per l\u0026rsquo;esame di maturità, ho scoperto Debian GNU/Linux. In quel periodo, ancora non c\u0026rsquo;era l\u0026rsquo;ADSL e tutto si faceva tramite un vecchio modem analogico a 56k. Ricordo di aver ordinato i CD di Debian Potato da un Linux User Group italiano. Un\u0026rsquo;esperienza entusiasmante che ha segnato profondamente la mia crescita informatica.\nOggi, però, qualcosa sembra essersi perso per strada. Il termine \u0026ldquo;coding\u0026rdquo; negli Stati Uniti identifica chiaramente la \u0026ldquo;programmazione vera e propria\u0026rdquo;. Le scuole americane insegnano linguaggi di programmazione come Python o JavaScript già in giovane età, preparando concretamente gli studenti a una carriera STEM. Proprio grazie a questa mentalità, negli Stati Uniti sono nate le aziende tech più importanti del mondo, sono sorti movimenti rivoluzionari come quello open source e oggi gli USA sono pionieri nell\u0026rsquo;utilizzo dell\u0026rsquo;intelligenza artificiale.\nIn Italia, invece, il concetto di coding è spesso ridotto a semplice strumento didattico per insegnare il \u0026ldquo;pensiero computazionale\u0026rdquo; attraverso software grafici come Scratch. Questi strumenti, a mio avviso, non semplificano affatto i concetti fondamentali della programmazione, anzi, li complicano, aggiungendo un livello di astrazione visiva che può confondere ulteriormente gli studenti.\nPermettetemi una battuta: in Italia ancora ci scandalizziamo se le persone sbagliano un congiuntivo, ma sembra normale e quasi un vanto dire: \u0026ldquo;Ah beh, io di informatica o di matematica non ci capisco nulla\u0026rdquo;, come se fosse assolutamente normale – e addirittura meritorio – non interessarsi o non comprendere i concetti basilari delle materie scientifiche.\nIl coding all\u0026rsquo;italiana nasce anche con un intento nobile: insegnare il pensiero computazionale. Tuttavia, viene spesso trattato come qualcosa di astratto e scollegato dalla vera programmazione, quasi una pratica filosofica.\nLo studio della programmazione con linguaggi reali come Python e C, invece, rende il processo di scomposizione dei problemi complessi in sotto-problemi più semplici del tutto naturale. Studiare questi linguaggi significa applicare concretamente questa metodologia.\nIo forse sono stato fortunato: già dalle scuole medie avevo un docente di matematica appassionato di informatica, con cui parlavo spesso di computer e programmazione in BASIC sia per il Commodore 64 sia per PC. Alle scuole superiori, avevo una bravissima professoressa di matematica che ci faceva applicare quanto studiato in classe direttamente in laboratorio, utilizzando Turbo Pascal come linguaggio didattico. Oggi, lo stesso ruolo potrebbe essere ricoperto da Python. E non posso non ricordare il mio professore di informatica, che ci fece studiare il C e, alla prima lezione, ormai per me indimenticabile, ci spiegò il concetto di algoritmo con esempi come la preparazione del caffè o la risoluzione della Torre di Hanoi, dicendoci: \u0026ldquo;Se una cosa sapete risolverla con carta e penna, allora sapete anche programmarla\u0026rdquo;. Ma era proprio quando iniziavamo a scrivere codice che emergevano le tecniche, si affinava il metodo e si scopriva come i linguaggi di programmazione permettessero naturalmente di abituare la mente al ragionamento che oggi chiamiamo computazionale.\nOvviamente, nessuno di noi sapeva che stava imparando il cosiddetto \u0026ldquo;pensiero computazionale\u0026rdquo;: stavamo semplicemente scrivendo codice, realizzando piccoli videogiochi e programmi didattici, divertendoci. Tornavamo a casa e continuavamo a programmare, a creare giochi, esercizi e applicazioni, anche perché il nostro professore aveva aspettative molto alte. Certamente, non a tutti piaceva la materia, nonostante avessimo scelto l\u0026rsquo;indirizzo informatico, ma credo che ciò sia del tutto naturale.\nÈ fondamentale, per chi ama l\u0026rsquo;informatica e desidera diventare un programmatore, studiare il linguaggio C: rappresenta una vera e propria palestra mentale, capace di formare lo spirito logico dell\u0026rsquo;informatico e di metterlo di fronte a sfide che coinvolgono sia l\u0026rsquo;hardware che l\u0026rsquo;ingegneria del software.\nIn un mondo tecnologico in continua e rapida evoluzione, specialmente con l\u0026rsquo;avvento dell\u0026rsquo;intelligenza artificiale, conoscere almeno i fondamenti della programmazione attraverso un linguaggio autentico come Python dovrebbe essere considerato essenziale sin dalla più tenera età, esattamente come lo studio della grammatica o delle tabelline. Introdurre complicazioni aggiuntive tramite blocchi visivi, come quelli di Scratch, risulta spesso inutile e può ostacolare, anziché facilitare, l\u0026rsquo;apprendimento.\nUn esempio concreto rende bene l\u0026rsquo;idea: un ciclo \u0026ldquo;for\u0026rdquo; o un costrutto \u0026ldquo;if\u0026rdquo; è molto più semplice da scrivere direttamente in Python, piuttosto che costruire lo stesso ciclo con blocchi grafici.\nScratch:\nTrascinare un blocco \u0026ldquo;ripeti\u0026rdquo; Selezionare il numero di volte Inserire altri blocchi all\u0026rsquo;interno per l\u0026rsquo;azione da ripetere, ad esempio: dire \u0026ldquo;Ciao!\u0026rdquo; Python:\nfor i in range(10): print(\u0026#34;Ciao!\u0026#34;) È evidente quanto sia più immediato, leggibile e gratificante usare Python. Non solo: Python è largamente usato nel mondo reale della programmazione ed è uno dei linguaggi principali nello sviluppo dell\u0026rsquo;intelligenza artificiale. Inoltre, per l\u0026rsquo;uso didattico, offre una vastissima gamma di librerie: per l\u0026rsquo;analisi dei dati, per la manipolazione del testo, per la musica, librerie matematiche e, non da ultima, PyGame per lo sviluppo di videogiochi. Questo permette agli studenti di divertirsi scrivendo codice, creando giochi e applicazioni. In alternativa, si potrebbero introdurre Game Engine come Godot (il più adatto all\u0026rsquo;uso didattico e professionale), Unity o Unreal Engine. Sono certo che con strumenti di questo tipo si riuscirebbe a ottenere il massimo coinvolgimento da parte degli studenti. Naturalmente, tutto ciò richiede anche da parte dei docenti una preparazione diversa e più tecnica, ma il risultato educativo e motivazionale ripagherebbe ampiamente lo sforzo.\nIn conclusione, il \u0026ldquo;coding all\u0026rsquo;italiana\u0026rdquo; basato su Scratch rischia di allontanare gli studenti dal vero mondo della programmazione. È necessario abituare gli studenti alla complessità, farli confrontare con problemi difficili, stimolarli a impegnarsi e a sforzarsi per risolverli. La programmazione, infatti, è paragonabile allo studio di uno strumento musicale come la chitarra o il pianoforte, allo studio della danza e alla pratica di uno sport. Non esistono scorciatoie, ma è necessario affrontare studio e sacrificio. Così come per imparare a suonare la chitarra è fondamentale studiare la teoria e suonare fino a formarsi i calli alle dita, anche nel coding e nello sviluppo software è indispensabile programmare attivamente per imparare a risolvere problemi e scomporre grandi sfide in problemi più piccoli e gestibili. Si dovrebbe quindi tornare a insegnare informatica vera, utilizzando linguaggi reali, concreti e potenti come Python e il C, in grado di offrire agli studenti risultati tangibili e gratificanti, proprio come accadeva negli anni \u0026lsquo;80 e \u0026lsquo;90.\nCredo che l\u0026rsquo;uso del coding unplugged sia un valido strumento della didattica, utile per abituare al pensiero computazionale anche attraverso attività interdisciplinari applicabili sia alle materie STEM che a quelle umanistiche. Il coding si può applicare allo studio della musica, colorando le note e i tasti degli strumenti in modo differente per aiutare lo studente a prendere familiarità con lo strumento; nella danza, per memorizzare sequenze di passi e posizioni; nello sport, nella matematica e persino nello studio delle lingue e delle scienze umane.\nTuttavia, il coding, e in particolare il coding unplugged, resta uno strumento efficace solo durante la tenera età, cioè l\u0026rsquo;infanzia e i primi anni della scuola primaria, quando lo studente non ha ancora acquisito le capacità minime di lettura e scrittura. Da quel momento in poi, così come accade per l\u0026rsquo;apprendimento di uno strumento musicale o della danza, inizia il tempo del sacrificio: bisogna abbandonare strumenti inutilmente artefatti, sporcarsi le mani e cominciare a scrivere codice vero. Farlo gradualmente, comprendendo i costrutti informatici, smontandoli, esaminandoli e scrivendo codice. Solo così, ne sono certo, si otterranno risultati straordinari, sia in termini di apprendimento che di soddisfazione personale. E così potremo formare una nuova generazione di persone che non saranno semplicemente utenti della tecnologia, ma la domineranno.\n","permalink":"https://cr1s1um.github.io/post/oltre-scratch-riflessioni-critiche-sul-concetto-di-coding-in-italia/","summary":"\u003cp\u003eNegli anni \u0026lsquo;80 e \u0026lsquo;90, molti ragazzi come me si avvicinavano al mondo dell\u0026rsquo;informatica grazie al mitico Commodore 64, ai primi personal computer assemblati e ai rudimentali sistemi operativi come DOS e Windows 3.11. Ricordo ancora con emozione il mio primo Commodore 64, regalatomi dai miei genitori nel 1989. Avevo appena sette anni, frequentavo la seconda elementare del mio piccolo paese, e la meraviglia provata nell\u0026rsquo;accendere quel computer, con la sua inconfondibile schermata blu e celeste, era impagabile. Quel piccolo dispositivo apriva davanti a me un intero universo fatto di sfide, studio, impegno e gratificazione.\u003c/p\u003e","title":"Oltre Scratch: Riflessioni critiche sul concetto di coding in Italia"},{"content":"\nMy .vimrc Dear developers, IT professionals, and system administrators worldwide, this is my final version of the .vimrc file, and I want to share it with everyone.\nGitHub Page Published: 2025-03-04 Ah\u0026hellip; I have disabled the ALE and Copilot plugins at startup. They are very convenient, but I find them quite intrusive, so I enable them only when needed or necessary.\nYou can enable them manually with the following commands (I prefer enable them when needed):\n:ALEEnable | ALEDisable :Copilot enable | disable Introduction I have worked on this file for many years, in a rather disorganized and experimental way. I started using Debian in the winter of 1999, and since then, I have experimented with many editors for both fun and work. For a long time, I used Emacs, but for the past 24 years, I have exclusively used ViM. I barely remember the Emacs commands now, although I have promised myself to revisit it someday – old friends should not be abandoned.\nMy goal was to have a fast and versatile editor, suitable for both software development and configuration file editing on Linux and Unix systems. I wanted a visually appealing workspace, with features such as autocomplete and auto-correction, along with all the modern conveniences like integration with Large Language Models for automated comment generation.\nAfter testing numerous plugins and configurations, I finally arrived at a .vimrc version that fully satisfies me. I chose the One Dark theme for its clarity, but I also installed a nostalgic theme that transforms ViM into a version inspired by the old QBasic – a tribute to the 90s, although less comfortable for everyday use.\nThe goal of this configuration is to have a powerful and customizable editor capable of meeting the needs of:\nDevelopers: with support for C, C++, Python, HTML, CSS, and JavaScript. System Administrators: for quick and comfortable editing of configuration files on Linux and macOS systems. Github and Copilot: I revised this configuration to overcome some issues with YouCompleteMe on Debian 12 stable and to make it even more complete and versatile.\nNote: A future TODO is to integrate OmniSharp and plugins for Unity3D, but for game development, I have fully embraced Godot and prefer to use its environment for GDscript.\nInstallation Guide - Unix/Linux - Debian GNU/Linux ;-) This guide explains how to set up Vim-Plug and install plugins using a custom .vimrc file.\nInstall Vim-Plug Download the plug.vim file to the appropriate directory:\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Set Up .vimrc Download your vimrc vimrc file and move it to your home directory as .vimrc:\nmv vimrc ~/.vimrc Install Plugins Open ViM and run the following command:\n:PlugInstall Alternatively, install the plugins directly from the command line:\nvim -c \u0026#39;PlugInstall\u0026#39; TODO Integrate OmniSharp for Unity3D support. Add specific configurations to enhance the Godot experience. License This project is licensed under the MIT License. Anyone is free to improve this configuration and, if they wish, credit me as the original author.\nHow to Contribute Feel free to clone this repository, experiment, and propose changes:\nFork the project. Create a branch for your modifications. Submit a pull request with a clear description of the improvements. Thank you for reading this guide! I hope it proves helpful and inspires you to customize your own ViM editor.\n","permalink":"https://cr1s1um.github.io/post/my_vimrc_file/","summary":"\u003cp\u003e\u003cimg alt=\"ViM Logo\" loading=\"lazy\" src=\"https://www.vasystems.it/img/vimlogo.svg.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"my-vimrc\"\u003eMy .vimrc\u003c/h1\u003e\n\u003cp\u003eDear developers, IT professionals, and system administrators worldwide, this is my final version of the \u003ccode\u003e.vimrc\u003c/code\u003e file, and I want to share it with everyone.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cr1s1um/vimrc\"\u003eGitHub Page\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePublished: 2025-03-04\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAh\u0026hellip; I have disabled the ALE and Copilot plugins at startup. They are very convenient, but I find them quite intrusive, so I enable them only when needed or necessary.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eYou can enable them manually with the following commands (I prefer enable them when needed):\u003c/p\u003e","title":"My .vimrc file"},{"content":"#include \u0026lt;stdio.h\u0026gt; int main(void){ printf(\u0026#34;Hello world\\n\u0026#34;); return 0; } Il primo codice di ogni buon programmatore inizia con un semplice: \u0026ldquo;Ciao, mondo!\u0026rdquo;\nIn questo blog voglio condividere la mia esperienza e i miei progetti su temi che mi appassionano da sempre: Debian GNU/Linux, sviluppo software, game development, digital forensics e cyber security.\nBenvenuto in questo viaggio tecnico e creativo!\n","permalink":"https://cr1s1um.github.io/post/helloworld/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIl primo codice di ogni buon programmatore inizia con un semplice: \u0026ldquo;Ciao, mondo!\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eIn questo blog voglio condividere la mia esperienza e i miei progetti su temi che mi appassionano da sempre: Debian GNU/Linux, sviluppo software, game development, digital forensics e cyber security.\u003c/p\u003e\n\u003cp\u003eBenvenuto in questo viaggio tecnico e creativo!\u003c/p\u003e","title":"/* Hello world */"},{"content":"Hi! I\u0026rsquo;m Vincenzo Argese and my passion for computing began in 1989, when my parents gave me a Commodore 64. That little machine, and its BASIC programming manual, was where I typed my very first lines of code.\nIn 2011, I started my own IT consultancy business, focusing on cybersecurity and software development. Since 2012, I’ve worked as a technical expert (CTU) specializing in Digital Forensics, incident response (DFIR).\nI regularly use C, C++, Python, PHP, HTML5/CSS/JavaScript, and frameworks like React in my professional projects. For fun, I develop videogames with Unity3D (C#) and Godot Engine (GDScript).\nI also have experience teaching cybersecurity and privacy in schools, especially through training projects with Microtech srl.\nI\u0026rsquo;m passionate about writing code that is clean, functional, and secure — no fluff, just efficiency and elegance.\nThis website is a place where I share what I love: projects, experiments, and ideas.\nHere you’ll find blog and technical articles on:\n💻 Software development and CyberSecurity 🐧 Debian GNU/Linux 🔐 Insights on Digital Forensics (DFIR) 🎮 Game Development projects . . . Welcome to my digital world!\nMy curriculum vitae Curriculum Vitae - IT\nContacts Twitter/X Github LinkedIn Whi Crisium? The name \u0026ldquo;Crisium\u0026rdquo; (or \u0026ldquo;cr1s1um\u0026rdquo;) comes from a character I used to play in an old text-based role-playing game from the \u0026rsquo;80s/\u0026rsquo;90s, accessed via telnet (MUD - Tempora Sanguinis): a blood-sucking vampire anti-paladin in a dark and fascinating fantasy world.\n","permalink":"https://cr1s1um.github.io/whoiam/","summary":"\u003ch1 id=\"hi\"\u003eHi!\u003c/h1\u003e\n\u003cp\u003eI\u0026rsquo;m \u003cstrong\u003eVincenzo Argese\u003c/strong\u003e and my passion for computing began in \u003cstrong\u003e1989\u003c/strong\u003e, when my parents gave me a \u003cstrong\u003eCommodore 64\u003c/strong\u003e. That little machine, and its \u003cstrong\u003eBASIC programming manual\u003c/strong\u003e, was where I typed my very first lines of code.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003e2011\u003c/strong\u003e, I started my own \u003cstrong\u003eIT consultancy business\u003c/strong\u003e, focusing on \u003cstrong\u003ecybersecurity\u003c/strong\u003e and \u003cstrong\u003esoftware development\u003c/strong\u003e. Since \u003cstrong\u003e2012\u003c/strong\u003e, I’ve worked as a \u003cstrong\u003etechnical expert (CTU)\u003c/strong\u003e specializing in \u003cstrong\u003eDigital Forensics\u003c/strong\u003e, \u003cstrong\u003eincident response\u003c/strong\u003e (\u003cstrong\u003eDFIR\u003c/strong\u003e).\u003c/p\u003e\n\u003cp\u003eI regularly use \u003cstrong\u003eC\u003c/strong\u003e, \u003cstrong\u003eC++\u003c/strong\u003e, \u003cstrong\u003ePython\u003c/strong\u003e, \u003cstrong\u003ePHP\u003c/strong\u003e, \u003cstrong\u003eHTML5/CSS/JavaScript\u003c/strong\u003e, and frameworks like \u003cstrong\u003eReact\u003c/strong\u003e in my professional projects. For fun, I develop \u003cstrong\u003evideogames\u003c/strong\u003e with \u003cstrong\u003eUnity3D (C#)\u003c/strong\u003e and \u003cstrong\u003eGodot Engine (GDScript)\u003c/strong\u003e.\u003c/p\u003e","title":"/* Who I'm */"},{"content":"Hi! I\u0026rsquo;m Vincenzo Argese and my passion for computing began in 1989, when my parents gave me a Commodore 64. That little machine, and its BASIC programming manual, was where I typed my very first lines of code.\nIn 2011, I started my own IT consultancy business, focusing on cybersecurity and software development. Since 2012, I’ve worked as a technical expert (CTU) specializing in Digital Forensics, incident response (DFIR).\nI regularly use C, C++, Python, PHP, HTML5/CSS/JavaScript, and frameworks like React in my professional projects. For fun, I develop videogames with Unity3D (C#) and Godot Engine (GDScript).\nI also have experience teaching cybersecurity and privacy in schools, especially through training projects with Microtech srl.\nI\u0026rsquo;m passionate about writing code that is clean, functional, and secure — no fluff, just efficiency and elegance.\nThis website is a place where I share what I love: projects, experiments, and ideas.\nHere you’ll find blog and technical articles on:\n💻 Software development and CyberSecurity 🐧 Debian GNU/Linux 🔐 Insights on Digital Forensics (DFIR) 🎮 Game Development projects . . . Welcome to my digital world!\n","permalink":"https://cr1s1um.github.io/readme/","summary":"\u003cp\u003eHi! I\u0026rsquo;m \u003cstrong\u003eVincenzo Argese\u003c/strong\u003e and my passion for computing began in \u003cstrong\u003e1989\u003c/strong\u003e, when my parents gave me a \u003cstrong\u003eCommodore 64\u003c/strong\u003e. That little machine, and its \u003cstrong\u003eBASIC programming manual\u003c/strong\u003e, was where I typed my very first lines of code.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003e2011\u003c/strong\u003e, I started my own \u003cstrong\u003eIT consultancy business\u003c/strong\u003e, focusing on \u003cstrong\u003ecybersecurity\u003c/strong\u003e and \u003cstrong\u003esoftware development\u003c/strong\u003e. Since \u003cstrong\u003e2012\u003c/strong\u003e, I’ve worked as a \u003cstrong\u003etechnical expert (CTU)\u003c/strong\u003e specializing in \u003cstrong\u003eDigital Forensics\u003c/strong\u003e, \u003cstrong\u003eincident response\u003c/strong\u003e (\u003cstrong\u003eDFIR\u003c/strong\u003e).\u003c/p\u003e\n\u003cp\u003eI regularly use \u003cstrong\u003eC\u003c/strong\u003e, \u003cstrong\u003eC++\u003c/strong\u003e, \u003cstrong\u003ePython\u003c/strong\u003e, \u003cstrong\u003ePHP\u003c/strong\u003e, \u003cstrong\u003eHTML5/CSS/JavaScript\u003c/strong\u003e, and frameworks like \u003cstrong\u003eReact\u003c/strong\u003e in my professional projects. For fun, I develop \u003cstrong\u003evideogames\u003c/strong\u003e with \u003cstrong\u003eUnity3D (C#)\u003c/strong\u003e and \u003cstrong\u003eGodot Engine (GDScript)\u003c/strong\u003e.\u003c/p\u003e","title":""}]