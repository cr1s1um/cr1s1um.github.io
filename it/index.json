[{"content":"Introduzione Ci sono progetti che nascono per necessità tecnica, altri per curiosità e voglia di sperimentare Bannator.py è nato per tutte queste ragioni.\nEra il 2 aprile 2010. Stavo facendo consulenza per un’azienda che si era trovata a subire ripetuti tentativi di accesso non autorizzato sui propri server: classici attacchi brute force alle password SSH. Serviva una soluzione rapida, semplice e comprensibile. Avrei potuto scrivere due righe in Bash e il problema sarebbe stato risolto in pochi minuti… ma c’era un’opportunità: trasformare un’esigenza tecnica in un’occasione formativa.\nIl team tecnico dell’azienda aveva infatti mostrato interesse verso Python, considerandolo più “leggibile” e “amichevole” rispetto agli script Bash e altre soluzioni più sistemistiche. Così, ho deciso di realizzare un piccolo script di 44 righe in tutto, spiegato riga per riga nei commenti, in modo che non fosse solo uno strumento, ma anche un esempio pratico di automazione sistemistica in Python.\nIl risultato è stato Bannator.py – chiamato così perché è il terminator degli IP molesti.\nUno script che:\nLegge i log di autenticazione (/var/log/auth.log) Individua gli IP che hanno fallito più volte il login Conta i tentativi falliti Blocca automaticamente gli IP troppo insistenti scrivendoli in /etc/hosts.deny Crea un backup del file di blocco, così da non perdere le regole precedenti Ho anche realizzato un video tutorial su YouTube in cui mostro lo script in azione su una macchina virtuale con VirtualBox e debian (versione 5.0 lenny). È stato un modo per unire didattica e pratica reale, mostrando come un problema di sicurezza possa essere affrontato con un approccio “fatto in casa” ma efficace.\nPerché riproporlo oggi? Siamo nel 14 agosto 2025. Più di 15 anni dopo la sua prima pubblicazione, Bannator.py è ovviamente superato (\u0026hellip;lo era già) dal punto di vista della sicurezza o soluzioni integrate più complesse, ma rimane:\nUn esempio perfetto per chi vuole imparare a leggere e scrivere script Python Un esercizio pratico di parsing dei log Un piccolo pezzo di storia personale Link utili Progetto Github Video tutorial Youtube Codice completo Codice originale completo datato 2 aprile 2010 Ripubblicato su vecchio sito il 23 febbraio 2023 #!/usr/bin/env python # -*- coding: utf-8 -*- # # Autore: Vincenzo Argese @crisiumdevstudio # YouTube: https://www.youtube.com/@crisiumdevstudio \u0026lt;-- Iscriviti e attiva la campanella GRAZIE # # Script: bannator.py # Descrizione: Script Python – bloccare IP da attacchi brute force # Data pubblicazione: 2 Aprile 2010 (Data di oggi 23 feb 2023 ...OMG) # # Web: www.vasystems.it # Articolo: https://www.informaticawebsystems.com/guida-script-python-bloccare-indirizzi-ip-attacchi-brute-force/ # (Ex-Progetto) Progetto Elven.it WebTV: https://www.youtube.com/channel/UCf36btbKZPx8wTvIP6jKPaQ # Importiamo la libreria string per gestire le righe dei file import string # In questa variabile inseriamo il percorso del file di log pathlog = \u0026#39;/var/log/\u0026#39; # Indichiamo in questa variabile il file di log su da verificare filelog = \u0026#39;auth.log\u0026#39; # Specifichiamo il path file hosts.deny pathban = \u0026#39;/etc/\u0026#39; # fileban = \u0026#39;hosts.deny\u0026#39; # Nella variabile target specifichiamo la stringa da utilizzare nella ricerca degli indirizzi IP # che stanno tentando l\u0026#39;accesso nel nostro sistema. Sappiamo che i log sono presenti nel # file /var/log/auth.log e la riga del log con l\u0026#39;accesso fallito e\u0026#39; # Failed password for invalid user admin from 192.168.1.2 port 17727 ssh2 # Quindi prendiamo come riferimento la stringa \u0026#39;Failed password\u0026#39; # target = \u0026#39;Failed password\u0026#39; # Numero di tentativi massimi consentiti da ogni IP per connettersi al server # su cui e\u0026#39; in esecuzione questo script. # BANNA = 3 # Iniziamo a realizzare il codice vero e proprio: # Contiamo il numero di caratteri della stringa contenuta in target, questo numero ci # permettera\u0026#39; di gestire la stringa e identificare in modo assolutamente preciso l\u0026#39;IP da bloccare. # lunghezza = len(target) # Apro il file auth.log in sola lettura (perche\u0026#39; devo semplicemente ricavare l\u0026#39;informazione # sulle connessioni e sugli IP) # f = file(pathlog+filelog, \u0026#39;r\u0026#39;) # Creiamo un dizionario python contenente gli IP bannati. # Il dizionario e\u0026#39; una struttura che ci permette di gestire le informazioni per chiave e valore # nel nostro caso useremo come chiave l\u0026#39;IP e come valore un numero intero che conta le volte # che l\u0026#39;IP non riesce ad eseguire l\u0026#39;accesso. # {key:valore, key2:valore2, …} # es.: {\u0026#39;192.168.1.2\u0026#39;: 2, \u0026#39;172.16.8.10\u0026#39;: 3} # ip_bannati = {} # Leggo la prima riga del file auth.log e copio il contenuto nella variabile i; i = f.readline() # Ciclo il file finche\u0026#39; la variabile i che contiene la riga da esaminare non e\u0026#39; vuota # quindi finche\u0026#39; il file auth.log non e\u0026#39; terminato. # while (i != \u0026#34;\u0026#34;): # Tramite il metodo find di string ottengo la posizione della stringa in cui stato trovato il target # posizione = string.find(i,target) # Se la posizione e\u0026#39; diversa da -1 significa che il targhet e\u0026#39; stato trovato # Quindi la stringa letta contiene \u0026#39;Failed password\u0026#39; ora dobbiamo riuscire a prendere # la parte della stringa che contiene l\u0026#39;IP if posizione != -1: # RICERCA IP # Concentriamoci sulla riga del file auth.log e in particolare alle parole tra cui l\u0026#39;IP # e\u0026#39; compreso: from 192.168.1.2 port # # Prima di identificare l\u0026#39;IP faccio la ricerca della stringa # from per assicurarmi la corretta posizione # inizio = string.find(i,\u0026#34;from\u0026#34;) if inizio != -1 : inizio = inizio + 5 # +5 caratteri di from e spazio # Calcolo la posizione finale tramite la stringa port fine = string.find(i,\u0026#34;port\u0026#34;) # Ottengo la substring con con l\u0026#39;IP da bannare ip = i[inizio:fine-1] # Se l\u0026#39;IP e\u0026#39; gia\u0026#39; presente in ip_bannati if ip in ip_bannati: # Aggiorna semplicemente il suo contatore ip_bannati[ip] = ip_bannati[ip] + 1 else : # Altrimenti inserisci l\u0026#39;IP e imposta il suo contatore a 1 ip_bannati[ip] = 1 # A questo punto abbiamo finito il lavoro su una singola riga quindi procediamo # con la riga successiva del file auth.log e ed esaminiamola nuovamente con il ciclo while i = f.readline() # In questo punto siamo usciti dal while, questo significa che il file auth.log e\u0026#39; terminato # e non abbiamo altre righe da esaminare, quindi possiamo chiudere il file. f.close() # Creo una copia di backup del file hosts.deny perche\u0026#39; ogni volta che lancio lo script # perdo gli IP bloccati precedentemente denyold = file(pathban+fileban, \u0026#39;r\u0026#39;) # Apro hosts.deny in lettura deny = file(\u0026#39;_\u0026#39;+fileban, \u0026#39;w\u0026#39;) # Creo il file _hosts.deny di backup # Leggo tutte le righe di hosts.deny e le copio in _hosts.deny i = denyold.readline() while (i!=\u0026#34;\u0026#34;): deny.write(i) i = denyold.readline() # Ora non resta che verificare quali IP hanno superato il numero # massimo di tentativi consentiti e scriverli nel file _hosts.deny con la regola opportuna. # # Ciclo per verificare tutti gli IP inseriti nel dizionario # for i in ip_bannati : # Se l\u0026#39;IP ha superato il numero massimo di tentativi # if ip_bannati[i] \u0026gt; BANNA : # Scrivi nel file hosts.deny l\u0026#39;IP con la regola ALL = BLOCCA TUTTO # es.: ALL:192.168.1.10 e vai a capo. # deny.write(\u0026#39;ALL:\u0026#39;+ i+\u0026#39;\\n\u0026#39;) # Chiudo i file denyold.close() deny.close() # Copio il contenuto di _hosts.deny nel file /etc/hosts.deny deny = file(pathban+fileban, \u0026#39;w\u0026#39;) denytmp = file(\u0026#39;_\u0026#39;+fileban, \u0026#39;r\u0026#39;) i = denytmp.readline() while (i!=\u0026#34;\u0026#34;): deny.write(i) i = denytmp.readline() denytmp.close() deny.close() # Fine ","permalink":"http://localhost:1313/it/post/bannator-python-script-blocca-brute-force/","summary":"\u003ch2 id=\"introduzione\"\u003eIntroduzione\u003c/h2\u003e\n\u003cp\u003eCi sono progetti che nascono per necessità tecnica, altri per curiosità e voglia di sperimentare \u003cstrong\u003eBannator.py\u003c/strong\u003e è nato per tutte queste ragioni.\u003c/p\u003e\n\u003cp\u003eEra il \u003cstrong\u003e2 aprile 2010\u003c/strong\u003e. Stavo facendo consulenza per un’azienda che si era trovata a subire ripetuti tentativi di accesso non autorizzato sui propri server: classici \u003cstrong\u003eattacchi brute force\u003c/strong\u003e alle password SSH. Serviva una soluzione rapida, semplice e comprensibile. Avrei potuto scrivere due righe in \u003cstrong\u003eBash\u003c/strong\u003e e il problema sarebbe stato risolto in pochi minuti… ma c’era un’opportunità: trasformare un’esigenza tecnica in un’occasione formativa.\u003c/p\u003e","title":"/* bannator.py: lo script Python di 44 righe che blocca attacchi brute force (e ti introduce alla programmazione!) */"},{"content":"Percettrone per la Simulazione di una Porta Logica AND Idea Questo codice è stato sviluppato come esercizio pratico basato su un video del canale YouTube @enkk. Nel video, Enkk spiega in modo semplice e intuitivo che cos\u0026rsquo;è un percettrone attraverso un esempio pratico e facilmente comprensibile e in questo post andiamo ad implementare il codice del percettrone.\nLink Github dell\u0026rsquo;implementazione Link utili: Inutile dire quanto sia importante e utile seguire @Enkk se siete interessati allo studio dei Large Language Model (LLM) e dell\u0026rsquo;AI\nCanale Youtube di Enkk Video “*come funziona: le reti neurali (pt.1)” Wikipedia - Perceptron L\u0026rsquo;Analogia del Cancello Automatico L\u0026rsquo;esempio utilizzato nel video è particolarmente efficace: immaginiamo un sistema per un parcheggio dove un\u0026rsquo;automobile può entrare solo e soltanto se entrambi i cancelli (Cancello A e Cancello B) sono aperti contemporaneamente\u0026hellip; OVVIAMENTE! ;-)\nSchema logico del percettrone di esempio Logica del Sistema (Esempio di @Enkk): Cancello A aperto = segnale 1 Cancello B aperto = segnale 1 Output 1 = L\u0026rsquo;automobile può entrare Output 0 = L\u0026rsquo;automobile non può entrare Tabella della Verità (AND): Cancello A Cancello B Risultato Azione 0 (chiuso) 0 (chiuso) 0 ❌ Auto non entra 1 (aperto) 0 (chiuso) 0 ❌ Auto non entra 0 (chiuso) 1 (aperto) 0 ❌ Auto non entra 1 (aperto) 1 (aperto) 1 ✅ Auto può entrare Connessione con la Logica Digitale Questa analogia rappresenta perfettamente il comportamento di una porta logica AND, dove l\u0026rsquo;output è 1 solo quando entrambi gli input sono 1. In tutti gli altri casi, l\u0026rsquo;output è 0.\nPerché Usare un Percettrone? È importante sottolineare che implementare una semplice porta AND richiede poche righe di codice:\nint porta_and(int a, int b) { return a \u0026amp;\u0026amp; b; // Semplicissimo! } \u0026hellip;ancora più semplice:\n#include \u0026lt;stdio.h\u0026gt; int main(void){ int a,b; a=0; // Assegnare valore 1 o 0 b=0; // Assegnare valore 1 o 0 if (a \u0026amp;\u0026amp; b){ printf(\u0026#34;Valore output: 1\\n\u0026#34;); } else{ printf(\u0026#34;Valore output: 0\\n\u0026#34;); } } Che cos\u0026rsquo;è un Percettrone? Il percettrone è la forma più semplice e fondamentale di una rete neurale artificiale. E\u0026rsquo; un singolo neurone artificiale che prende delle decisioni basandosi sui dati che riceve in input.\nStruttura di Base Un percettrone è composto da:\nInput: I dati che riceve (nel nostro caso, lo stato dei due cancelli) Pesi (Weights): Numeri che determinano l\u0026rsquo;importanza di ogni input (IMPORTANTISSIMO i pesi sono i PARAMETRI di un Large Language Model, quindi l\u0026rsquo;intelligenza) Bias: Un valore di soglia che aiuta nella decisione finale Funzione di Attivazione: Decide se \u0026ldquo;attivare\u0026rdquo; il neurone (output 1) o meno (output 0) Output: La decisione finale (1 o 0) Perché il percettrone è l\u0026rsquo;elemento più piccolo di una Rete Neurale? Il percettrone è come il \u0026ldquo;mattone\u0026rdquo; con cui si costruiscono reti neurali più complesse:\nRete Neurale Semplice: 1 percettrone o pochi percettroni (ormai solo a scopo didattico) Rete Neurale Multistrato: Centinaia o migliaia di percettroni collegati insieme Deep Learning: Milioni di percettroni organizzati in layer (strati) Proprio come per costruire una casa bisogna capire come funziona un singolo mattone, per comprendere le reti neurali ritengo sia utile prima padroneggiare il percettrone.\nPerché è Importante Capire Come Funziona? Fondamento Teorico: Tutti i concetti avanzati (backpropagation, gradient descent, ecc.) derivano dai principi del percettrone Semplicità Didattica: È abbastanza semplice da capire completamente, ma contiene tutti i concetti chiave e permette di creare un\u0026rsquo;immagine mentale. Base Storica: È stato il primo modello di neurone artificiale. Comprensione Intuitiva: Una volta capito il percettrone, il salto concettuale verso reti più complesse è molto più naturale Valore Didattico di Questo Esercizio Tuttavia, l\u0026rsquo;utilizzo di un percettrone per questo esempio, può sembrare eccessivo ma rappresenta un eccellente esercizio didattico per diversi motivi:\nProblema Semplice: La porta AND è facile da visualizzare Risultato Verificabile: Possiamo controllare facilmente se funziona (Ho messo nel codice la stampa a video di tutti i valori \u0026hellip;passo per passo) Concetti Completi: Include tutti gli elementi fondamentali (training, weights, bias, epochs) Ponte Concettuale: Collega la logica digitale di base al machine learning avanzato 1. Comprensione dei Fondamenti delle Reti Neurali Pesi (Weights): Come la rete assegna importanza agli input Bias: Il termine di soglia che influenza la decisione finale Funzione di Attivazione: Come vengono prodotti gli output binari 2. Processo di Apprendimento Epoche di Addestramento: Cicli ripetuti di apprendimento Dataset: Raccolta di esempi di input-output per l\u0026rsquo;addestramento Aggiornamento dei Pesi: Come la rete \u0026ldquo;impara\u0026rdquo; dai suoi errori IMPORTANTISSIMO 3. Algoritmo di Apprendimento Forward Pass: Calcolo della predizione Calcolo dell\u0026rsquo;Errore: Confronto con l\u0026rsquo;output desiderato Backward Pass: Aggiornamento dei parametri basato sull\u0026rsquo;errore 4. Concetti di Convergenza Come la rete raggiunge una soluzione ottimale Criteri di arresto dell\u0026rsquo;addestramento Valutazione delle prestazioni Implementazione NOTA BENE: Qui riporto la versione 1 dell\u0026rsquo;implementazione, probabilmente su github aggiornerò il codice mano a mano che mi vengono nuove idee. Quindi è importante avere come riferimento sempre il link al progetto github per la versione più aggiornata.\nLink Github dell\u0026rsquo;implementazione\n/* * PERCEPTRON * (AND Logic Gate Learning) * * Author: Vincenzo Argese * Web: https://cr1s1um.github.io/ * Date: 2025-08-09 * Version: v1.0 * Idea: Youtuber @Enkk video “come funziona: le reti neurali (pt.1)” https://www.youtube.com/watch?v=2UdQQA65jcM * * Description: * This program implements a simple perceptron (single artificial neuron) that learns * to simulate an AND logic gate through supervised learning. * * The perceptron receives two binary inputs (0 or 1) and learns to output: * - 1 only when both inputs are 1 (like an AND gate) * - 0 in all other cases * * Training process: * 1. Initialize weights and bias with small random values * 2. For each training example, calculate prediction * 3. Compare prediction with expected output * 4. If wrong, adjust weights using perceptron learning rule * 5. Repeat until all predictions are correct or max epochs reached * * This demonstrates fundamental neural network concepts: weights, bias, * activation functions, training epochs, and supervised learning. */ #include \u0026lt;stdio.h\u0026gt; #define EPOCHS 100 // Define constant: maximum number of training epochs /* Forward declaration of activation function */ int activation_function(float sum); int main(void) { /* Training Dataset */ int x[4][2]={ // Input matrix: 4 examples with 2 features each {0,0}, // First example: x1=0, x2=0 -\u0026gt; expected output: 0 {1,0}, // Second example: x1=1, x2=0 -\u0026gt; expected output: 0 {0,1}, // Third example: x1=0, x2=1 -\u0026gt; expected output: 0 {1,1} // Fourth example: x1=1, x2=1 -\u0026gt; expected output: 1 }, y[4]={0,0,0,1}; // Expected outputs: represents AND logic function /* Weights and Bias initialization */ float w1 = 0.1, // Weight for first input, initialized to 0.1 w2 = 0.1, // Weight for second input, initialized to 0.1 b = 0.1; // Bias term, initialized to 0.1 // Learning rate parameter float learning_rate = 0.1; // Controls how much weights are adjusted during learning /* Training Phase */ for (int epoch=0; epoch \u0026lt; EPOCHS; epoch++){ // Main training loop: up to 100 epochs int errors = 0; // Counter for errors in current epoch // Process all training examples for(int i=0; i\u0026lt;4; i++){ // Iterate through all 4 examples in dataset // DEBUG - Print current training state printf(\u0026#34;TRAINING EPOCH: %d\\n\u0026#34;, epoch); // Fixed typo: epoch instead of ephoc printf(\u0026#34;Current errors: %d\\n\u0026#34;, errors); // Print current error count printf(\u0026#34;Input X1: %d - X2: %d\\n\u0026#34;, x[i][0], x[i][1]); // Print current inputs printf(\u0026#34;Expected output Y: %d\\n\u0026#34;, y[i]); // Print expected output printf(\u0026#34;w1: %.1f - w2: %.1f - Bias: %.1f\\n\u0026#34;, w1, w2, b); // Print current weights and bias printf(\u0026#34;Learning Rate: %.1f\\n\u0026#34;, learning_rate); // Print learning rate // Forward pass: calculate weighted sum float weighted_sum = (x[i][0]*w1 + x[i][1]*w2) + b; // Linear combination: x1*w1 + x2*w2 + bias int predicted_output = activation_function(weighted_sum); // Apply activation function // DEBUG - Print forward pass results printf(\u0026#34;Weighted sum: %.1f\\n\u0026#34;, weighted_sum); // Print the weighted sum printf(\u0026#34;Predicted output: %d\\n\u0026#34;, predicted_output); // Print network\u0026#39;s prediction // Calculate prediction error int error = y[i] - predicted_output; // Error = expected - predicted // DEBUG - Print error information printf(\u0026#34;Prediction error: %d\\n\u0026#34;, error); // Print the error printf(\u0026#34;---------------------------------------------\\n\u0026#34;); // Separator line // Update weights if there\u0026#39;s an error (perceptron learning rule) if (error != 0){ // Only update if prediction is wrong // Apply perceptron learning rule w1 += learning_rate * error * x[i][0]; // Update w1: w1 = w1 + η * error * x1 w2 += learning_rate * error * x[i][1]; // Update w2: w2 = w2 + η * error * x2 b += learning_rate * error; // Update bias: b = b + η * error errors++; // Increment error counter } } // Check convergence: stop if no errors occurred if(errors == 0){ // Perfect classification achieved printf(\u0026#34;TRAINING COMPLETED - epoch: %d\\n\u0026#34;, epoch); // Print completion message break; // Exit training loop early } } // Print final results printf(\u0026#34;\\n\\n\u0026#34;); // Print empty lines for readability printf(\u0026#34;=== FINAL TRAINED PARAMETERS ===\\n\u0026#34;); // Print results header printf(\u0026#34;Final w1: %.1f - w2: %.1f - Bias: %.1f\\n\u0026#34;, w1, w2, b); // Print final weights and bias // Test the trained perceptron printf(\u0026#34;\\n=== TESTING TRAINED PERCEPTRON ===\\n\u0026#34;); for(int i=0; i\u0026lt;4; i++){ float test_sum = (x[i][0]*w1 + x[i][1]*w2) + b; int test_output = activation_function(test_sum); printf(\u0026#34;Input (%d,%d) -\u0026gt; Output: %d (Expected: %d)\\n\u0026#34;, x[i][0], x[i][1], test_output, y[i]); } return 0; } /* * Activation Function * * Purpose: Converts continuous weighted sum to binary output * Parameter: float sum - the weighted sum from perceptron * Returns: 1 if sum \u0026gt; 0, otherwise returns 0 * * This implements a threshold activation function commonly used in perceptrons */ int activation_function(float sum){ return (sum \u0026gt; 0) ? 1 : 0; // Ternary operator: if sum \u0026gt; 0 return 1, else return 0 } Conclusione Una porta AND può essere implementata in modo molto più semplice ma questo esercizio fornisce una base solida per comprendere i meccanismi fondamentali che stanno alla base delle reti neurali più complesse. È un ponte ideale tra la logica digitale di base e i concetti avanzati del machine learning.\nOgni elemento che sembra \u0026ldquo;eccessivo\u0026rdquo; in questo contesto (pesi, bias, epoche di training) diventa essenziale quando si passa a problemi più complessi dove le soluzioni tradizionali non sono più sufficienti.\n","permalink":"http://localhost:1313/it/post/percettrone-c-neurone-artificiale-primo-passo/","summary":"\u003ch1 id=\"percettrone-per-la-simulazione-di-una-porta-logica-and\"\u003ePercettrone per la Simulazione di una Porta Logica AND\u003c/h1\u003e\n\u003ch2 id=\"idea\"\u003eIdea\u003c/h2\u003e\n\u003cp\u003eQuesto codice è stato sviluppato come esercizio pratico basato su un video del canale YouTube \u003cstrong\u003e@enkk\u003c/strong\u003e. Nel video, Enkk spiega in modo semplice e intuitivo che cos\u0026rsquo;è un percettrone attraverso un esempio pratico e facilmente comprensibile e in questo post andiamo ad implementare il codice del percettrone.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cr1s1um/OpenCodeLab/blob/main/c/02_perceptron_and.c\"\u003eLink Github dell\u0026rsquo;implementazione\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"link-utili\"\u003eLink utili:\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eInutile dire quanto sia importante e utile seguire @Enkk se siete interessati allo studio dei Large Language Model (LLM) e dell\u0026rsquo;AI\u003c/strong\u003e\u003c/p\u003e","title":"/* Costruisci il tuo primo neurone artificiale in C: il Percettrone spiegato semplice */"},{"content":"Informativa sulla Privacy Ai sensi dell’articolo 13 del Regolamento (UE) 2016/679 (\u0026ldquo;GDPR\u0026rdquo;), ti informiamo che il presente sito web rispetta e tutela la riservatezza dei dati personali degli utenti.\nTitolare del trattamento Nome: Vincenzo Argese Email: vincenzo#dot#argese#at#gmail#dot#com Sito: https://cr1s1um.github.io Finalità del trattamento, base giuridica e tipologia dei dati trattati Il sito tratta i seguenti dati personali per le finalità indicate:\nCookie di Google Analytics: Il sito utilizza Google Analytics (gtag.js) per analizzare in forma aggregata le visite al sito e migliorare i contenuti. I cookie possono raccogliere informazioni come l\u0026rsquo;indirizzo IP, browser, dispositivo, sistema operativo, pagine visitate. La base giuridica è il consenso dell’interessato (art. 6, par. 1, lett. a GDPR). Il tracciamento è attivo solo previo consenso tramite banner cookie.\nDati per i commenti (Utteranc.es): I commenti agli articoli sono gestiti tramite il servizio utteranc.es, che richiede l’autenticazione tramite GitHub. Quando commenti, GitHub tratta i tuoi dati personali secondo le proprie Privacy Policy. Il sito non accede direttamente a tali dati.\nDati tecnici: come indirizzi IP, tipo di browser, sistema operativo, URI/URL, orario della richiesta, metodo di richiesta, dimensione del file di risposta, codice di stato del server. Questi dati vengono trattati automaticamente a fini di sicurezza e manutenzione tecnica del sito.\nComunicazione dei dati I dati raccolti sono trattati esclusivamente da soggetti autorizzati dal Titolare o da eventuali responsabili del trattamento nominati ai sensi dell’art. 28 del GDPR. I dati relativi a Google Analytics possono essere trasferiti verso paesi extra-UE, secondo le garanzie previste da Google in conformità al GDPR e alle decisioni della Corte di Giustizia UE (es. sentenza \u0026ldquo;Schrems II\u0026rdquo;).\nTempi di conservazione I cookie di consenso vengono conservati per 31 giorni. I dati statistici anonimi vengono conservati secondo le impostazioni di Google Analytics. I dati tecnici raccolti automaticamente vengono conservati per il tempo strettamente necessario alla finalità per cui sono stati raccolti. Diritti dell’interessato Ai sensi degli articoli 15 e seguenti del GDPR, hai diritto di:\nottenere conferma dell’esistenza o meno di dati personali che ti riguardano; accedere ai tuoi dati personali; chiedere la rettifica, cancellazione o limitazione del trattamento; opporti al trattamento; revocare il consenso prestato; proporre reclamo al Garante per la protezione dei dati personali https://www.garanteprivacy.it/. Puoi esercitare i tuoi diritti scrivendo al Titolare del Trattamento all’indirizzo email fornito sopra.\nCookie e tecnologie simili Il sito utilizza un sistema di gestione del consenso ai cookie conforme al GDPR. Al primo accesso, viene mostrato un banner che consente all’utente di:\naccettare tutti i cookie \u0026ndash;\u0026gt; /* Accetta tutto */; negare il consensoi \u0026ndash;\u0026gt; /* Rifiuta */; personalizzare le preferenze \u0026ndash;\u0026gt; /* Salva le preferenze */; rivedere il consenso in qualsiasi momento cliccando sul link \u0026ndash;\u0026gt; /* Gestisci le preferenze */ nel footer. Aggiornamenti La presente informativa è soggetta ad aggiornamenti. Gli utenti sono invitati a consultare periodicamente questa pagina per eventuali modifiche.\nUltimo aggiornamento: 29 luglio 2025\n","permalink":"http://localhost:1313/it/privacy/","summary":"\u003ch2 id=\"informativa-sulla-privacy\"\u003eInformativa sulla Privacy\u003c/h2\u003e\n\u003cp\u003eAi sensi dell’articolo 13 del Regolamento (UE) 2016/679 (\u0026ldquo;GDPR\u0026rdquo;), ti informiamo che il presente sito web rispetta e tutela la riservatezza dei dati personali degli utenti.\u003c/p\u003e\n\u003ch3 id=\"titolare-del-trattamento\"\u003eTitolare del trattamento\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNome\u003c/strong\u003e: Vincenzo Argese\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEmail\u003c/strong\u003e: vincenzo#dot#argese#at#gmail#dot#com\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSito\u003c/strong\u003e: \u003ca href=\"https://cr1s1um.github.io\"\u003ehttps://cr1s1um.github.io\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"finalità-del-trattamento-base-giuridica-e-tipologia-dei-dati-trattati\"\u003eFinalità del trattamento, base giuridica e tipologia dei dati trattati\u003c/h3\u003e\n\u003cp\u003eIl sito tratta i seguenti dati personali per le finalità indicate:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCookie di Google Analytics\u003c/strong\u003e: Il sito utilizza Google Analytics (gtag.js) per analizzare in forma aggregata le visite al sito e migliorare i contenuti. I cookie possono raccogliere informazioni come l\u0026rsquo;indirizzo IP, browser, dispositivo, sistema operativo, pagine visitate. La base giuridica è il consenso dell’interessato (art. 6, par. 1, lett. a GDPR). Il tracciamento è attivo solo previo consenso tramite banner cookie.\u003c/p\u003e","title":"Privacy e cookie policy"},{"content":"Negli anni \u0026lsquo;80 e \u0026lsquo;90, molti ragazzi come me si avvicinavano al mondo dell\u0026rsquo;informatica grazie al mitico Commodore 64, ai primi personal computer assemblati e ai rudimentali sistemi operativi come DOS e Windows 3.11. Ricordo ancora con emozione il mio primo Commodore 64, regalatomi dai miei genitori nel 1989. Avevo appena sette anni, frequentavo la seconda elementare del mio piccolo paese, e la meraviglia provata nell\u0026rsquo;accendere quel computer, con la sua inconfondibile schermata blu e celeste, era impagabile. Quel piccolo dispositivo apriva davanti a me un intero universo fatto di sfide, studio, impegno e gratificazione.\nAll\u0026rsquo;epoca, imparare a usare un computer significava leggere manuali, decifrare istruzioni in linguaggio BASIC e spesso sbattere la testa contro problemi che oggi sembrerebbero assurdi. Con i primi personal computer e il sistema operativo DOS, spesso era necessario utilizzare l\u0026rsquo;editor Edit per modificare i file di configurazione autoexec.bat e config.sys, anche solo per riuscire ad avviare un gioco. Scoprii anche che, all\u0026rsquo;interno dell\u0026rsquo;ambiente QBasic del MS-DOS, erano presenti due giochi: Nibbles e Gorillas, i cui sorgenti erano interamente scritti in BASIC e liberamente consultabili. Proprio questo sforzo rendeva ogni risultato, persino l\u0026rsquo;avvio di un gioco da cassetta o da floppy disk, una conquista gratificante.\nI film di quel periodo celebravano l\u0026rsquo;informatica: basti ricordare titoli come \u0026ldquo;War Games\u0026rdquo;, \u0026ldquo;Tron\u0026rdquo; e il mitico \u0026ldquo;Tagliaerbe\u0026rdquo;. L\u0026rsquo;informatico era una figura affascinante e avventurosa, un hacker capace di dominare le tecnologie più avanzate. Questa bellissima emozione l\u0026rsquo;ho riprovata anni dopo, quando, durante la scrittura della tesina per l\u0026rsquo;esame di maturità, ho scoperto Debian GNU/Linux. In quel periodo, ancora non c\u0026rsquo;era l\u0026rsquo;ADSL e tutto si faceva tramite un vecchio modem analogico a 56k. Ricordo di aver ordinato i CD di Debian Potato da un Linux User Group italiano. Un\u0026rsquo;esperienza entusiasmante che ha segnato profondamente la mia crescita informatica.\nOggi, però, qualcosa sembra essersi perso per strada. Il termine \u0026ldquo;coding\u0026rdquo; negli Stati Uniti identifica chiaramente la \u0026ldquo;programmazione vera e propria\u0026rdquo;. Le scuole americane insegnano linguaggi di programmazione come Python o JavaScript già in giovane età, preparando concretamente gli studenti a una carriera STEM. Proprio grazie a questa mentalità, negli Stati Uniti sono nate le aziende tech più importanti del mondo, sono sorti movimenti rivoluzionari come quello open source e oggi gli USA sono pionieri nell\u0026rsquo;utilizzo dell\u0026rsquo;intelligenza artificiale.\nIn Italia, invece, il concetto di coding è spesso ridotto a semplice strumento didattico per insegnare il \u0026ldquo;pensiero computazionale\u0026rdquo; attraverso software grafici come Scratch. Questi strumenti, a mio avviso, non semplificano affatto i concetti fondamentali della programmazione, anzi, li complicano, aggiungendo un livello di astrazione visiva che può confondere ulteriormente gli studenti.\nPermettetemi una battuta: in Italia ancora ci scandalizziamo se le persone sbagliano un congiuntivo, ma sembra normale e quasi un vanto dire: \u0026ldquo;Ah beh, io di informatica o di matematica non ci capisco nulla\u0026rdquo;, come se fosse assolutamente normale – e addirittura meritorio – non interessarsi o non comprendere i concetti basilari delle materie scientifiche.\nIl coding all\u0026rsquo;italiana nasce anche con un intento nobile: insegnare il pensiero computazionale. Tuttavia, viene spesso trattato come qualcosa di astratto e scollegato dalla vera programmazione, quasi una pratica filosofica.\nLo studio della programmazione con linguaggi reali come Python e C, invece, rende il processo di scomposizione dei problemi complessi in sotto-problemi più semplici del tutto naturale. Studiare questi linguaggi significa applicare concretamente questa metodologia.\nIo forse sono stato fortunato: già dalle scuole medie avevo un docente di matematica appassionato di informatica, con cui parlavo spesso di computer e programmazione in BASIC sia per il Commodore 64 sia per PC. Alle scuole superiori, avevo una bravissima professoressa di matematica che ci faceva applicare quanto studiato in classe direttamente in laboratorio, utilizzando Turbo Pascal come linguaggio didattico. Oggi, lo stesso ruolo potrebbe essere ricoperto da Python. E non posso non ricordare il mio professore di informatica, che ci fece studiare il C e, alla prima lezione, ormai per me indimenticabile, ci spiegò il concetto di algoritmo con esempi come la preparazione del caffè o la risoluzione della Torre di Hanoi, dicendoci: \u0026ldquo;Se una cosa sapete risolverla con carta e penna, allora sapete anche programmarla\u0026rdquo;. Ma era proprio quando iniziavamo a scrivere codice che emergevano le tecniche, si affinava il metodo e si scopriva come i linguaggi di programmazione permettessero naturalmente di abituare la mente al ragionamento che oggi chiamiamo computazionale.\nOvviamente, nessuno di noi sapeva che stava imparando il cosiddetto \u0026ldquo;pensiero computazionale\u0026rdquo;: stavamo semplicemente scrivendo codice, realizzando piccoli videogiochi e programmi didattici, divertendoci. Tornavamo a casa e continuavamo a programmare, a creare giochi, esercizi e applicazioni, anche perché il nostro professore aveva aspettative molto alte. Certamente, non a tutti piaceva la materia, nonostante avessimo scelto l\u0026rsquo;indirizzo informatico, ma credo che ciò sia del tutto naturale.\nÈ fondamentale, per chi ama l\u0026rsquo;informatica e desidera diventare un programmatore, studiare il linguaggio C: rappresenta una vera e propria palestra mentale, capace di formare lo spirito logico dell\u0026rsquo;informatico e di metterlo di fronte a sfide che coinvolgono sia l\u0026rsquo;hardware che l\u0026rsquo;ingegneria del software.\nIn un mondo tecnologico in continua e rapida evoluzione, specialmente con l\u0026rsquo;avvento dell\u0026rsquo;intelligenza artificiale, conoscere almeno i fondamenti della programmazione attraverso un linguaggio autentico come Python dovrebbe essere considerato essenziale sin dalla più tenera età, esattamente come lo studio della grammatica o delle tabelline. Introdurre complicazioni aggiuntive tramite blocchi visivi, come quelli di Scratch, risulta spesso inutile e può ostacolare, anziché facilitare, l\u0026rsquo;apprendimento.\nUn esempio concreto rende bene l\u0026rsquo;idea: un ciclo \u0026ldquo;for\u0026rdquo; o un costrutto \u0026ldquo;if\u0026rdquo; è molto più semplice da scrivere direttamente in Python, piuttosto che costruire lo stesso ciclo con blocchi grafici.\nScratch:\nTrascinare un blocco \u0026ldquo;ripeti\u0026rdquo; Selezionare il numero di volte Inserire altri blocchi all\u0026rsquo;interno per l\u0026rsquo;azione da ripetere, ad esempio: dire \u0026ldquo;Ciao!\u0026rdquo; Python:\nfor i in range(10): print(\u0026#34;Ciao!\u0026#34;) È evidente quanto sia più immediato, leggibile e gratificante usare Python. Non solo: Python è largamente usato nel mondo reale della programmazione ed è uno dei linguaggi principali nello sviluppo dell\u0026rsquo;intelligenza artificiale. Inoltre, per l\u0026rsquo;uso didattico, offre una vastissima gamma di librerie: per l\u0026rsquo;analisi dei dati, per la manipolazione del testo, per la musica, librerie matematiche e, non da ultima, PyGame per lo sviluppo di videogiochi. Questo permette agli studenti di divertirsi scrivendo codice, creando giochi e applicazioni. In alternativa, si potrebbero introdurre Game Engine come Godot (il più adatto all\u0026rsquo;uso didattico e professionale), Unity o Unreal Engine. Sono certo che con strumenti di questo tipo si riuscirebbe a ottenere il massimo coinvolgimento da parte degli studenti. Naturalmente, tutto ciò richiede anche da parte dei docenti una preparazione diversa e più tecnica, ma il risultato educativo e motivazionale ripagherebbe ampiamente lo sforzo.\nIn conclusione, il \u0026ldquo;coding all\u0026rsquo;italiana\u0026rdquo; basato su Scratch rischia di allontanare gli studenti dal vero mondo della programmazione. È necessario abituare gli studenti alla complessità, farli confrontare con problemi difficili, stimolarli a impegnarsi e a sforzarsi per risolverli. La programmazione, infatti, è paragonabile allo studio di uno strumento musicale come la chitarra o il pianoforte, allo studio della danza e alla pratica di uno sport. Non esistono scorciatoie, ma è necessario affrontare studio e sacrificio. Così come per imparare a suonare la chitarra è fondamentale studiare la teoria e suonare fino a formarsi i calli alle dita, anche nel coding e nello sviluppo software è indispensabile programmare attivamente per imparare a risolvere problemi e scomporre grandi sfide in problemi più piccoli e gestibili. Si dovrebbe quindi tornare a insegnare informatica vera, utilizzando linguaggi reali, concreti e potenti come Python e il C, in grado di offrire agli studenti risultati tangibili e gratificanti, proprio come accadeva negli anni \u0026lsquo;80 e \u0026lsquo;90.\nCredo che l\u0026rsquo;uso del coding unplugged sia un valido strumento della didattica, utile per abituare al pensiero computazionale anche attraverso attività interdisciplinari applicabili sia alle materie STEM che a quelle umanistiche. Il coding si può applicare allo studio della musica, colorando le note e i tasti degli strumenti in modo differente per aiutare lo studente a prendere familiarità con lo strumento; nella danza, per memorizzare sequenze di passi e posizioni; nello sport, nella matematica e persino nello studio delle lingue e delle scienze umane.\nTuttavia, il coding, e in particolare il coding unplugged, resta uno strumento efficace solo durante la tenera età, cioè l\u0026rsquo;infanzia e i primi anni della scuola primaria, quando lo studente non ha ancora acquisito le capacità minime di lettura e scrittura. Da quel momento in poi, così come accade per l\u0026rsquo;apprendimento di uno strumento musicale o della danza, inizia il tempo del sacrificio: bisogna abbandonare strumenti inutilmente artefatti, sporcarsi le mani e cominciare a scrivere codice vero. Farlo gradualmente, comprendendo i costrutti informatici, smontandoli, esaminandoli e scrivendo codice. Solo così, ne sono certo, si otterranno risultati straordinari, sia in termini di apprendimento che di soddisfazione personale. E così potremo formare una nuova generazione di persone che non saranno semplicemente utenti della tecnologia, ma la domineranno.\n","permalink":"http://localhost:1313/it/post/coding-italia-scratch-vs-programmazione-vera/","summary":"\u003cp\u003eNegli anni \u0026lsquo;80 e \u0026lsquo;90, molti ragazzi come me si avvicinavano al mondo dell\u0026rsquo;informatica grazie al mitico Commodore 64, ai primi personal computer assemblati e ai rudimentali sistemi operativi come DOS e Windows 3.11. Ricordo ancora con emozione il mio primo Commodore 64, regalatomi dai miei genitori nel 1989. Avevo appena sette anni, frequentavo la seconda elementare del mio piccolo paese, e la meraviglia provata nell\u0026rsquo;accendere quel computer, con la sua inconfondibile schermata blu e celeste, era impagabile. Quel piccolo dispositivo apriva davanti a me un intero universo fatto di sfide, studio, impegno e gratificazione.\u003c/p\u003e","title":"/* Coding in Italia: perché Scratch non basta (e cosa serve davvero imparare) */"},{"content":"\nIl mio file .vimrc dell\u0026rsquo;editor di codice ViM Cari sviluppatori, professionisti IT e amministratori di sistema di tutto il mondo, questa è la mia versione \u0026ldquo;quasi\u0026rdquo; definitiva del file .vimrc e desidero condividerla con tutti.\nPagina GitHub Pubblicato: 2025-03-04 Ah… ho disabilitato i plugin ALE e Copilot all’avvio. Sono molto comodi, ma li trovo piuttosto invasivi, quindi li abilito solo quando realmente servono.\nPotete abilitarli manualmente con i seguenti comandi (personalmente preferisco attivarli solo se necessari):\n:ALEEnable | ALEDisable :Copilot enable | disable Introduzione Ho lavorato a questo file per molti anni, in modo piuttosto disordinato e sperimentale. Ho iniziato a usare Debian nell’inverno del 1999 e da allora ho provato molti editor, sia per divertimento che per lavoro. Per molto tempo ho utilizzato Emacs, ma negli ultimi 24 anni ho lavorato esclusivamente con ViM. A malapena ricordo i comandi di Emacs ormai, anche se mi sono ripromesso di rimetterci mano un giorno – i vecchi amici non si dovrebbero abbandonare.\nIl mio obiettivo era avere un editor veloce e versatile, adatto sia allo sviluppo software sia alla modifica di file di configurazione su sistemi Linux e Unix. Volevo anche uno spazio di lavoro gradevole alla vista, con funzionalità come autocompletamento e autocorrezione, oltre a tutte le comodità moderne, come l’integrazione con i Large Language Model per la generazione automatica di commenti.\nDopo aver provato numerosi plugin e configurazioni, sono finalmente arrivato a una versione del .vimrc che mi soddisfa pienamente. Ho scelto il tema One Dark per la sua chiarezza, ma ho installato anche un tema nostalgico che trasforma ViM in una versione ispirata al vecchio QBasic – un omaggio agli anni ’90, anche se meno pratico per l’uso quotidiano.\nLo scopo di questa configurazione è avere un editor potente e personalizzabile, in grado di soddisfare le esigenze di:\nSviluppatori: con supporto per C, C++, Python, HTML, CSS e JavaScript. Amministratori di sistema: per modificare rapidamente e con comodità i file di configurazione su sistemi Linux e macOS. Github e Copilot. Ho rivisto questa configurazione per superare alcuni problemi di YouCompleteMe su Debian 12 stable e per renderla ancora più completa e versatile.\nNota: un TODO futuro è integrare OmniSharp e plugin per Unity3D, ma per lo sviluppo di videogiochi ho ormai abbracciato completamente Godot e preferisco usare il suo ambiente per GDscript.\nGuida all’installazione – Unix/Linux – Debian GNU/Linux ;-) Questa guida spiega come configurare Vim-Plug e installare i plugin utilizzando un file .vimrc personalizzato.\nInstallazione Vim-Plug Scaricare il file plug.vim nella directory appropriata:\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Configurare .vimrc Scarica il file vimrc e spostalo nella tua home directory rinominandolo in .vimrc:\nmv vimrc ~/.vimrc Installare i plugin Apri ViM ed esegui il seguente comando:\n:PlugInstall In alternativa, installa i plugin direttamente dalla riga di comando:\nvim -c \u0026#39;PlugInstall\u0026#39; TODO Integrare OmniSharp per il supporto a Unity3D. Aggiungere configurazioni specifiche per migliorare l’esperienza con Godot. Licenza Questo progetto è rilasciato sotto la Licenza MIT.\nChiunque è libero di migliorare questa configurazione e, se lo desidera, può citarmi come autore originale.\nCome contribuire Sentiti libero di clonare questo repository, sperimentare e proporre modifiche:\nEffettua il fork del progetto. Crea un branch per le tue modifiche. Invia una pull request con una descrizione chiara dei miglioramenti. Grazie per aver letto questa guida! Spero ti sia utile e ti ispiri a personalizzare il tuo editor ViM.\n","permalink":"http://localhost:1313/it/post/configurazione-vim-vimrc-definitivo/","summary":"\u003cp\u003e\u003cimg alt=\"ViM Logo\" loading=\"lazy\" src=\"https://www.vasystems.it/img/vimlogo.svg.webp\"\u003e\u003c/p\u003e\n\u003ch1 id=\"il-mio-file-vimrc-delleditor-di-codice-vim\"\u003eIl mio file .vimrc dell\u0026rsquo;editor di codice ViM\u003c/h1\u003e\n\u003cp\u003eCari sviluppatori, professionisti IT e amministratori di sistema di tutto il mondo, questa è la mia versione \u0026ldquo;quasi\u0026rdquo; definitiva del file .vimrc e desidero condividerla con tutti.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cr1s1um/vimrc\"\u003ePagina GitHub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePubblicato: 2025-03-04\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eAh… ho disabilitato i plugin ALE e Copilot all’avvio. Sono molto comodi, ma li trovo piuttosto invasivi, quindi li abilito solo quando realmente servono.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ePotete abilitarli manualmente con i seguenti comandi (personalmente preferisco attivarli solo se necessari):\u003c/p\u003e","title":"/* La configurazione definitiva di ViM (.vimrc) che ogni sviluppatore dovrebbe provare */"},{"content":"Ciao e benvenuti! Sono Vincenzo Argese e la mia passione per l’informatica e la programmazione è iniziata nel 1989, quando i miei genitori mi regalarono un Commodore 64. Con quel piccolo computer e il suo manuale di programmazione in BASIC, ho scritto le prime righe di codice.\nNel 2011 ho avviato la mia attività di consulenza informatica, focalizzata su cybersecurity e software development.\nDal 2012 mi sono specializzato in Digital Forensics e Incident Response (DFIR) e svolgo il ruolo di Consulente Tecnico d’Ufficio (CTU) per la Magistratura in ambito di giustizia penale.\nIl sistema operativo che utilizzo e amo di più è Debian GNU/Linux: dal 1999/2000, quindi da oltre 25 anni, rappresenta la base di tutte le mie attività professionali e personali — lavoro quotidiano, sviluppo software, game development, amministrazione di sistemi e digital forensics.\nI miei linguaggi di programmazione preferiti sono il C e il Python. Nel tempo libero mi dedico allo sviluppo di videogiochi con Godot Engine (GDScript) e Unreal Engine (C++). La mia filosofia è scrivere codice pulito, funzionale e sicuro: niente fronzoli, solo efficienza ed eleganza.\nDal 2019 collaboro con Microtech srl, azienda specializzata in consulenza informatica per il settore educational. Mi occupo di formazione in cybersecurity per il personale docente e amministrativo degli istituti scolastici e di sviluppo web.\nQuesto sito è il mio spazio personale, dove condivido progetti, esperimenti e idee.\nQui troverai blog e articoli tecnici su:\n💻 Software development e CyberSecurity 🐧 Debian GNU/Linux 🔐 Approfondimenti su Digital Forensics (DFIR) 🎮 Game Development e Game Design . . . Benvenuti nel mio mondo digitale!\nIl mio curriculum vitae Curriculum Vitae - IT\nRestiamo in contatto Twitter/X Github LinkedIn Perché Crisium? Il nome \u0026ldquo;Crisium\u0026rdquo; (o \u0026ldquo;cr1s1um\u0026rdquo;) deriva dal mio personaggio in un vecchio gioco di ruolo testuale degli anni \u0026lsquo;80/\u0026lsquo;90, accessibile tramite telnet (MUD - Tempora Sanguinis): un vampiro anti-paladino succhiasangue in un mondo fantasy oscuro e affascinante.\n","permalink":"http://localhost:1313/it/chi-sono/","summary":"\u003ch1 id=\"ciao-e-benvenuti\"\u003eCiao e benvenuti!\u003c/h1\u003e\n\u003cp\u003eSono \u003cstrong\u003eVincenzo Argese\u003c/strong\u003e e la mia passione per l’informatica e la programmazione è iniziata nel \u003cstrong\u003e1989\u003c/strong\u003e, quando i miei genitori mi regalarono un \u003cstrong\u003eCommodore 64\u003c/strong\u003e. Con quel piccolo computer e il suo \u003cstrong\u003emanuale di programmazione in BASIC\u003c/strong\u003e, ho scritto le prime righe di codice.\u003c/p\u003e\n\u003cp\u003eNel \u003cstrong\u003e2011\u003c/strong\u003e ho avviato la mia attività di \u003cstrong\u003econsulenza informatica\u003c/strong\u003e, focalizzata su \u003cstrong\u003ecybersecurity\u003c/strong\u003e e \u003cstrong\u003esoftware development\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eDal \u003cstrong\u003e2012\u003c/strong\u003e mi sono specializzato in \u003cstrong\u003eDigital Forensics\u003c/strong\u003e e \u003cstrong\u003eIncident Response\u003c/strong\u003e (\u003cstrong\u003eDFIR\u003c/strong\u003e) e svolgo il ruolo di \u003cstrong\u003eConsulente Tecnico d’Ufficio (CTU)\u003c/strong\u003e per la Magistratura in ambito di giustizia penale.\u003c/p\u003e","title":"/* About me */"},{"content":"#include \u0026lt;stdio.h\u0026gt; int main(){ printf(\u0026#34;Hello world\\n\u0026#34;); return 0; } Il primo codice di ogni buon programmatore inizia con un semplice: \u0026ldquo;Ciao, mondo!\u0026rdquo;\nIn questo blog voglio condividere la mia esperienza e i miei progetti su temi che mi appassionano da sempre: Debian GNU/Linux, sviluppo software, game development, digital forensics e cyber security.\nBenvenuto in questo viaggio tecnico e creativo!\n","permalink":"http://localhost:1313/it/post/hello-world-c-primo-programma/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nf\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello world\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIl primo codice di ogni buon programmatore inizia con un semplice: \u0026ldquo;Ciao, mondo!\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eIn questo blog voglio condividere la mia esperienza e i miei progetti su temi che mi appassionano da sempre: Debian GNU/Linux, sviluppo software, game development, digital forensics e cyber security.\u003c/p\u003e\n\u003cp\u003eBenvenuto in questo viaggio tecnico e creativo!\u003c/p\u003e","title":"/* Hello World: perché tutti i programmatori iniziano da qui */"}]